/* Automatic generated by DeviceToClazz */

package com.example.xiaomi.upnp.apis.media.projection.sink.device.host;

import android.content.Context;
import android.util.Log;

import java.util.HashMap;
import java.util.Map;

import upnp.typedef.UpnpError;
import upnp.typedef.device.Device;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.exception.UpnpException;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.handler.MyActionHandler;
import upnps.api.manager.handler.MyCompletionHandler;
import upnps.api.manager.host.config.DeviceConfig;
import upnps.api.manager.host.ServiceStub;

public class SinkDevice implements MyActionHandler {

    private static final String TAG = "SinkDevice";

    /**
     * deviceType & serviceType
     */
    public static final String DEVICE_TYPE = "SinkDevice";
    public static final String SERVICE_StreamTransport = "StreamTransport";
    public static final String SERVICE_SessionManager = "SessionManager";

    /**
     * serviceId
     */
    private static final String ID_StreamTransport = "urn:upnp-org:serviceId:StreamTransport";
    private static final String ID_SessionManager = "urn:upnp-org:serviceId:SessionManager";

    /**
     * device & service handler;
     */

    private Device _device;
    private Map<String, ServiceStub> _services = new HashMap<String, ServiceStub>();

    public SinkDevice(Context context, DeviceConfig config) throws UpnpException {
        _device = config.build(context);
        _services.put(ID_StreamTransport, new StreamTransport(_device.getService(ID_StreamTransport)));
        _services.put(ID_SessionManager, new SessionManager(_device.getService(ID_SessionManager)));
    }

    public String getDeviceId() {
        return _device.getDeviceId();
    }

    public void start(MyCompletionHandler handler) {
        try {
            UpnpManager.getUpnp().register(_device, handler, this);
        } catch (UpnpException e) {
            e.printStackTrace();
        }
    }

    public void stop(MyCompletionHandler handler) {
        try {
            UpnpManager.getUpnp().unregister(_device, handler);
        } catch (UpnpException e) {
            e.printStackTrace();
        }
    }

    @Override
    public int onAction(ActionInfo info) {
        ServiceStub handler = _services.get(info.getServiceId());
        if (handler == null) {
            Log.e(TAG, "service not found: " + info.getServiceId());
            return UpnpError.E_INTERNAL_ERROR;
        }

        return handler.onAction(info);
    }

    public StreamTransport getStreamTransport() {
        return (StreamTransport)_services.get(ID_StreamTransport);
    }

    public SessionManager getSessionManager() {
        return (SessionManager)_services.get(ID_SessionManager);
    }

}
