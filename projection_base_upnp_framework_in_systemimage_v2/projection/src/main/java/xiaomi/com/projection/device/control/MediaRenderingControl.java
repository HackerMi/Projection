/* Automatic generated by DeviceToClazz */

package xiaomi.com.projection.device.control;

import android.util.Log;

import java.util.List;

import upnp.typedef.ReturnCode;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.property.DataType;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.ctrlpoint.device.AbstractService;
import upnps.api.manager.handler.MyCompletionHandler;
import upnps.api.manager.handler.MyEventListener;
import upnps.api.manager.handler.MyInvokeCompletionHandler;

public class MediaRenderingControl extends AbstractService {

    private static final String TAG = "MediaRenderingControl";

    public MediaRenderingControl(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (44)
    //-------------------------------------------------------
    public static final String ACTION_GetAllowedDefaultTransforms = "GetAllowedDefaultTransforms";
    public static final String _GetAllowedDefaultTransforms_ARG_AllowedDefaultTransformSettings = "AllowedDefaultTransformSettings";
    public static final String ACTION_GetAllAvailableTransforms = "GetAllAvailableTransforms";
    public static final String _GetAllAvailableTransforms_ARG_AllAllowedTransformSettings = "AllAllowedTransformSettings";
    public static final String ACTION_GetColorTemperature = "GetColorTemperature";
    public static final String _GetColorTemperature_ARG_InstanceID = "InstanceID";
    public static final String _GetColorTemperature_ARG_CurrentColorTemperature = "CurrentColorTemperature";
    public static final String ACTION_SetLoudness = "SetLoudness";
    public static final String _SetLoudness_ARG_InstanceID = "InstanceID";
    public static final String _SetLoudness_ARG_Channel = "Channel";
    public static final String _SetLoudness_ARG_DesiredLoudness = "DesiredLoudness";
    public static final String ACTION_GetVolumeDB = "GetVolumeDB";
    public static final String _GetVolumeDB_ARG_InstanceID = "InstanceID";
    public static final String _GetVolumeDB_ARG_Channel = "Channel";
    public static final String _GetVolumeDB_ARG_CurrentVolume = "CurrentVolume";
    public static final String ACTION_GetContrast = "GetContrast";
    public static final String _GetContrast_ARG_InstanceID = "InstanceID";
    public static final String _GetContrast_ARG_CurrentContrast = "CurrentContrast";
    public static final String ACTION_GetGreenVideoGain = "GetGreenVideoGain";
    public static final String _GetGreenVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _GetGreenVideoGain_ARG_CurrentGreenVideoGain = "CurrentGreenVideoGain";
    public static final String ACTION_GetMute = "GetMute";
    public static final String _GetMute_ARG_InstanceID = "InstanceID";
    public static final String _GetMute_ARG_Channel = "Channel";
    public static final String _GetMute_ARG_CurrentMute = "CurrentMute";
    public static final String ACTION_SetColorTemperature = "SetColorTemperature";
    public static final String _SetColorTemperature_ARG_InstanceID = "InstanceID";
    public static final String _SetColorTemperature_ARG_DesiredColorTemperature = "DesiredColorTemperature";
    public static final String ACTION_SetContrast = "SetContrast";
    public static final String _SetContrast_ARG_InstanceID = "InstanceID";
    public static final String _SetContrast_ARG_DesiredContrast = "DesiredContrast";
    public static final String ACTION_SetBlueVideoBlackLevel = "SetBlueVideoBlackLevel";
    public static final String _SetBlueVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _SetBlueVideoBlackLevel_ARG_DesiredBlueVideoBlackLevel = "DesiredBlueVideoBlackLevel";
    public static final String ACTION_SetSharpness = "SetSharpness";
    public static final String _SetSharpness_ARG_InstanceID = "InstanceID";
    public static final String _SetSharpness_ARG_DesiredSharpness = "DesiredSharpness";
    public static final String ACTION_ListPresets = "ListPresets";
    public static final String _ListPresets_ARG_InstanceID = "InstanceID";
    public static final String _ListPresets_ARG_CurrentPresetNameList = "CurrentPresetNameList";
    public static final String ACTION_SetHorizontalKeystone = "SetHorizontalKeystone";
    public static final String _SetHorizontalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _SetHorizontalKeystone_ARG_DesiredHorizontalKeystone = "DesiredHorizontalKeystone";
    public static final String ACTION_SetMute = "SetMute";
    public static final String _SetMute_ARG_InstanceID = "InstanceID";
    public static final String _SetMute_ARG_Channel = "Channel";
    public static final String _SetMute_ARG_DesiredMute = "DesiredMute";
    public static final String ACTION_SetBrightness = "SetBrightness";
    public static final String _SetBrightness_ARG_InstanceID = "InstanceID";
    public static final String _SetBrightness_ARG_DesiredBrightness = "DesiredBrightness";
    public static final String ACTION_GetDefaultTransforms = "GetDefaultTransforms";
    public static final String _GetDefaultTransforms_ARG_CurrentDefaultTransformSettings = "CurrentDefaultTransformSettings";
    public static final String ACTION_GetVerticalKeystone = "GetVerticalKeystone";
    public static final String _GetVerticalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _GetVerticalKeystone_ARG_CurrentVerticalKeystone = "CurrentVerticalKeystone";
    public static final String ACTION_GetVolumeDBRange = "GetVolumeDBRange";
    public static final String _GetVolumeDBRange_ARG_InstanceID = "InstanceID";
    public static final String _GetVolumeDBRange_ARG_Channel = "Channel";
    public static final String _GetVolumeDBRange_ARG_MinValue = "MinValue";
    public static final String _GetVolumeDBRange_ARG_MaxValue = "MaxValue";
    public static final String ACTION_GetBlueVideoBlackLevel = "GetBlueVideoBlackLevel";
    public static final String _GetBlueVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _GetBlueVideoBlackLevel_ARG_CurrentBlueVideoBlackLevel = "CurrentBlueVideoBlackLevel";
    public static final String ACTION_GetAllowedTransforms = "GetAllowedTransforms";
    public static final String _GetAllowedTransforms_ARG_InstanceID = "InstanceID";
    public static final String _GetAllowedTransforms_ARG_CurrentAllowedTransformSettings = "CurrentAllowedTransformSettings";
    public static final String ACTION_GetBlueVideoGain = "GetBlueVideoGain";
    public static final String _GetBlueVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _GetBlueVideoGain_ARG_CurrentBlueVideoGain = "CurrentBlueVideoGain";
    public static final String ACTION_SetVerticalKeystone = "SetVerticalKeystone";
    public static final String _SetVerticalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _SetVerticalKeystone_ARG_DesiredVerticalKeystone = "DesiredVerticalKeystone";
    public static final String ACTION_SetGreenVideoBlackLevel = "SetGreenVideoBlackLevel";
    public static final String _SetGreenVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _SetGreenVideoBlackLevel_ARG_DesiredGreenVideoBlackLevel = "DesiredGreenVideoBlackLevel";
    public static final String ACTION_SetVolumeDB = "SetVolumeDB";
    public static final String _SetVolumeDB_ARG_InstanceID = "InstanceID";
    public static final String _SetVolumeDB_ARG_Channel = "Channel";
    public static final String _SetVolumeDB_ARG_DesiredVolume = "DesiredVolume";
    public static final String ACTION_GetSharpness = "GetSharpness";
    public static final String _GetSharpness_ARG_InstanceID = "InstanceID";
    public static final String _GetSharpness_ARG_CurrentSharpness = "CurrentSharpness";
    public static final String ACTION_GetRedVideoBlackLevel = "GetRedVideoBlackLevel";
    public static final String _GetRedVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _GetRedVideoBlackLevel_ARG_CurrentRedVideoBlackLevel = "CurrentRedVideoBlackLevel";
    public static final String ACTION_SetRedVideoGain = "SetRedVideoGain";
    public static final String _SetRedVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _SetRedVideoGain_ARG_DesiredRedVideoGain = "DesiredRedVideoGain";
    public static final String ACTION_SetDefaultTransforms = "SetDefaultTransforms";
    public static final String _SetDefaultTransforms_ARG_DesiredDefaultTransformSettings = "DesiredDefaultTransformSettings";
    public static final String ACTION_GetStateVariables = "GetStateVariables";
    public static final String _GetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _GetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String _GetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String ACTION_GetLoudness = "GetLoudness";
    public static final String _GetLoudness_ARG_InstanceID = "InstanceID";
    public static final String _GetLoudness_ARG_Channel = "Channel";
    public static final String _GetLoudness_ARG_CurrentLoudness = "CurrentLoudness";
    public static final String ACTION_SetRedVideoBlackLevel = "SetRedVideoBlackLevel";
    public static final String _SetRedVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _SetRedVideoBlackLevel_ARG_DesiredRedVideoBlackLevel = "DesiredRedVideoBlackLevel";
    public static final String ACTION_SetVolume = "SetVolume";
    public static final String _SetVolume_ARG_InstanceID = "InstanceID";
    public static final String _SetVolume_ARG_Channel = "Channel";
    public static final String _SetVolume_ARG_DesiredVolume = "DesiredVolume";
    public static final String ACTION_SetBlueVideoGain = "SetBlueVideoGain";
    public static final String _SetBlueVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _SetBlueVideoGain_ARG_DesiredBlueVideoGain = "DesiredBlueVideoGain";
    public static final String ACTION_SetTransforms = "SetTransforms";
    public static final String _SetTransforms_ARG_InstanceID = "InstanceID";
    public static final String _SetTransforms_ARG_DesiredTransformValues = "DesiredTransformValues";
    public static final String ACTION_GetVolume = "GetVolume";
    public static final String _GetVolume_ARG_InstanceID = "InstanceID";
    public static final String _GetVolume_ARG_Channel = "Channel";
    public static final String _GetVolume_ARG_CurrentVolume = "CurrentVolume";
    public static final String ACTION_SetStateVariables = "SetStateVariables";
    public static final String _SetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _SetStateVariables_ARG_RenderingControlUDN = "RenderingControlUDN";
    public static final String _SetStateVariables_ARG_ServiceType = "ServiceType";
    public static final String _SetStateVariables_ARG_ServiceId = "ServiceId";
    public static final String _SetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String _SetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String ACTION_GetRedVideoGain = "GetRedVideoGain";
    public static final String _GetRedVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _GetRedVideoGain_ARG_CurrentRedVideoGain = "CurrentRedVideoGain";
    public static final String ACTION_GetBrightness = "GetBrightness";
    public static final String _GetBrightness_ARG_InstanceID = "InstanceID";
    public static final String _GetBrightness_ARG_CurrentBrightness = "CurrentBrightness";
    public static final String ACTION_GetGreenVideoBlackLevel = "GetGreenVideoBlackLevel";
    public static final String _GetGreenVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _GetGreenVideoBlackLevel_ARG_CurrentGreenVideoBlackLevel = "CurrentGreenVideoBlackLevel";
    public static final String ACTION_SetGreenVideoGain = "SetGreenVideoGain";
    public static final String _SetGreenVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _SetGreenVideoGain_ARG_DesiredGreenVideoGain = "DesiredGreenVideoGain";
    public static final String ACTION_GetHorizontalKeystone = "GetHorizontalKeystone";
    public static final String _GetHorizontalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _GetHorizontalKeystone_ARG_CurrentHorizontalKeystone = "CurrentHorizontalKeystone";
    public static final String ACTION_GetTransforms = "GetTransforms";
    public static final String _GetTransforms_ARG_InstanceID = "InstanceID";
    public static final String _GetTransforms_ARG_CurrentTransformValues = "CurrentTransformValues";
    public static final String ACTION_SelectPreset = "SelectPreset";
    public static final String _SelectPreset_ARG_InstanceID = "InstanceID";
    public static final String _SelectPreset_ARG_PresetName = "PresetName";

    //-------------------------------------------------------
    // Property Name (30)
    //-------------------------------------------------------
    public static final String PROPERTY_VerticalKeystone = "VerticalKeystone";
    public static final String PROPERTY_PresetNameList = "PresetNameList";
    public static final String PROPERTY_AllowedDefaultTransformSettings = "AllowedDefaultTransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_DeviceUDN = "A_ARG_TYPE_DeviceUDN";
    public static final String PROPERTY_A_ARG_TYPE_ServiceID = "A_ARG_TYPE_ServiceID";
    public static final String PROPERTY_GreenVideoGain = "GreenVideoGain";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_HorizontalKeystone = "HorizontalKeystone";
    public static final String PROPERTY_VolumeDB = "VolumeDB";
    public static final String PROPERTY_Contrast = "Contrast";
    public static final String PROPERTY_TransformSettings = "TransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_PresetName = "A_ARG_TYPE_PresetName";
    public static final String PROPERTY_A_ARG_TYPE_Channel = "A_ARG_TYPE_Channel";
    public static final String PROPERTY_BlueVideoBlackLevel = "BlueVideoBlackLevel";
    public static final String PROPERTY_Sharpness = "Sharpness";
    public static final String PROPERTY_Brightness = "Brightness";
    public static final String PROPERTY_Volume = "Volume";
    public static final String PROPERTY_RedVideoGain = "RedVideoGain";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableValuePairs = "A_ARG_TYPE_StateVariableValuePairs";
    public static final String PROPERTY_AllowedTransformSettings = "AllowedTransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_ServiceType = "A_ARG_TYPE_ServiceType";
    public static final String PROPERTY_GreenVideoBlackLevel = "GreenVideoBlackLevel";
    public static final String PROPERTY_ColorTemperature = "ColorTemperature";
    public static final String PROPERTY_DefaultTransformSettings = "DefaultTransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableList = "A_ARG_TYPE_StateVariableList";
    public static final String PROPERTY_BlueVideoGain = "BlueVideoGain";
    public static final String PROPERTY_Mute = "Mute";
    public static final String PROPERTY_Loudness = "Loudness";
    public static final String PROPERTY_RedVideoBlackLevel = "RedVideoBlackLevel";
    public static final String PROPERTY_LastChange = "LastChange";

    //-------------------------------------------------------
    // Property value defined (2)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_PresetName {
        UNDEFINED,
        V_FactoryDefaults;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_FactoryDefaults = "FactoryDefaults";

        public static A_ARG_TYPE_PresetName retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_FactoryDefaults)) {
                return V_FactoryDefaults;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_FactoryDefaults:
                    value = CONST_V_FactoryDefaults;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_Channel {
        UNDEFINED,
        V_Master;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Master = "Master";

        public static A_ARG_TYPE_Channel retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Master)) {
                return V_Master;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Master:
                    value = CONST_V_Master;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (44)
    //-------------------------------------------------------

    public interface GetAllowedDefaultTransforms_CompletedHandler {
        void onSucceed(String theAllowedDefaultTransformSettings);
        void onFailed(int errCode, String description);
    }

    public int GetAllowedDefaultTransforms(final GetAllowedDefaultTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetAllowedDefaultTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pAllowedDefaultTransformSettings = invocation.getResult(_GetAllowedDefaultTransforms_ARG_AllowedDefaultTransformSettings);
                        if (pAllowedDefaultTransformSettings == null) {
                            Log.d(TAG, String.format("%s not found", _GetAllowedDefaultTransforms_ARG_AllowedDefaultTransformSettings));
                            break;
                        }

                        String theAllowedDefaultTransformSettings = (String) pAllowedDefaultTransformSettings.getCurrentValue();

                        handler.onSucceed(theAllowedDefaultTransformSettings);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetAllAvailableTransforms_CompletedHandler {
        void onSucceed(String theAllAllowedTransformSettings);
        void onFailed(int errCode, String description);
    }

    public int GetAllAvailableTransforms(final GetAllAvailableTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetAllAvailableTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pAllAllowedTransformSettings = invocation.getResult(_GetAllAvailableTransforms_ARG_AllAllowedTransformSettings);
                        if (pAllAllowedTransformSettings == null) {
                            Log.d(TAG, String.format("%s not found", _GetAllAvailableTransforms_ARG_AllAllowedTransformSettings));
                            break;
                        }

                        String theAllAllowedTransformSettings = (String) pAllAllowedTransformSettings.getCurrentValue();

                        handler.onSucceed(theAllAllowedTransformSettings);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetColorTemperature_CompletedHandler {
        void onSucceed(Integer theCurrentColorTemperature);
        void onFailed(int errCode, String description);
    }

    public int GetColorTemperature(Long InstanceID, final GetColorTemperature_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetColorTemperature);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetColorTemperature_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentColorTemperature = invocation.getResult(_GetColorTemperature_ARG_CurrentColorTemperature);
                        if (pCurrentColorTemperature == null) {
                            Log.d(TAG, String.format("%s not found", _GetColorTemperature_ARG_CurrentColorTemperature));
                            break;
                        }

                        Integer theCurrentColorTemperature = (Integer) pCurrentColorTemperature.getCurrentValue();

                        handler.onSucceed(theCurrentColorTemperature);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetLoudness_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetLoudness(Long InstanceID, A_ARG_TYPE_Channel Channel, Boolean DesiredLoudness, final SetLoudness_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetLoudness);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetLoudness_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetLoudness_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetLoudness_ARG_DesiredLoudness, DesiredLoudness, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetVolumeDB_CompletedHandler {
        void onSucceed(Integer theCurrentVolume);
        void onFailed(int errCode, String description);
    }

    public int GetVolumeDB(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetVolumeDB_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetVolumeDB);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetVolumeDB_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetVolumeDB_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentVolume = invocation.getResult(_GetVolumeDB_ARG_CurrentVolume);
                        if (pCurrentVolume == null) {
                            Log.d(TAG, String.format("%s not found", _GetVolumeDB_ARG_CurrentVolume));
                            break;
                        }

                        Integer theCurrentVolume = (Integer) pCurrentVolume.getCurrentValue();

                        handler.onSucceed(theCurrentVolume);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetContrast_CompletedHandler {
        void onSucceed(Integer theCurrentContrast);
        void onFailed(int errCode, String description);
    }

    public int GetContrast(Long InstanceID, final GetContrast_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetContrast);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetContrast_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentContrast = invocation.getResult(_GetContrast_ARG_CurrentContrast);
                        if (pCurrentContrast == null) {
                            Log.d(TAG, String.format("%s not found", _GetContrast_ARG_CurrentContrast));
                            break;
                        }

                        Integer theCurrentContrast = (Integer) pCurrentContrast.getCurrentValue();

                        handler.onSucceed(theCurrentContrast);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetGreenVideoGain_CompletedHandler {
        void onSucceed(Integer theCurrentGreenVideoGain);
        void onFailed(int errCode, String description);
    }

    public int GetGreenVideoGain(Long InstanceID, final GetGreenVideoGain_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetGreenVideoGain);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetGreenVideoGain_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentGreenVideoGain = invocation.getResult(_GetGreenVideoGain_ARG_CurrentGreenVideoGain);
                        if (pCurrentGreenVideoGain == null) {
                            Log.d(TAG, String.format("%s not found", _GetGreenVideoGain_ARG_CurrentGreenVideoGain));
                            break;
                        }

                        Integer theCurrentGreenVideoGain = (Integer) pCurrentGreenVideoGain.getCurrentValue();

                        handler.onSucceed(theCurrentGreenVideoGain);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetMute_CompletedHandler {
        void onSucceed(Boolean theCurrentMute);
        void onFailed(int errCode, String description);
    }

    public int GetMute(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetMute_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetMute);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetMute_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetMute_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentMute = invocation.getResult(_GetMute_ARG_CurrentMute);
                        if (pCurrentMute == null) {
                            Log.d(TAG, String.format("%s not found", _GetMute_ARG_CurrentMute));
                            break;
                        }

                        Boolean theCurrentMute = (Boolean) pCurrentMute.getCurrentValue();

                        handler.onSucceed(theCurrentMute);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetColorTemperature_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetColorTemperature(Long InstanceID, Integer DesiredColorTemperature, final SetColorTemperature_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetColorTemperature);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetColorTemperature_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetColorTemperature_ARG_DesiredColorTemperature, DesiredColorTemperature, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetContrast_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetContrast(Long InstanceID, Integer DesiredContrast, final SetContrast_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetContrast);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetContrast_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetContrast_ARG_DesiredContrast, DesiredContrast, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetBlueVideoBlackLevel_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetBlueVideoBlackLevel(Long InstanceID, Integer DesiredBlueVideoBlackLevel, final SetBlueVideoBlackLevel_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetBlueVideoBlackLevel);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetBlueVideoBlackLevel_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetBlueVideoBlackLevel_ARG_DesiredBlueVideoBlackLevel, DesiredBlueVideoBlackLevel, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetSharpness_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetSharpness(Long InstanceID, Integer DesiredSharpness, final SetSharpness_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetSharpness);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetSharpness_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetSharpness_ARG_DesiredSharpness, DesiredSharpness, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface ListPresets_CompletedHandler {
        void onSucceed(String theCurrentPresetNameList);
        void onFailed(int errCode, String description);
    }

    public int ListPresets(Long InstanceID, final ListPresets_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_ListPresets);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_ListPresets_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentPresetNameList = invocation.getResult(_ListPresets_ARG_CurrentPresetNameList);
                        if (pCurrentPresetNameList == null) {
                            Log.d(TAG, String.format("%s not found", _ListPresets_ARG_CurrentPresetNameList));
                            break;
                        }

                        String theCurrentPresetNameList = (String) pCurrentPresetNameList.getCurrentValue();

                        handler.onSucceed(theCurrentPresetNameList);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetHorizontalKeystone_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetHorizontalKeystone(Long InstanceID, Integer DesiredHorizontalKeystone, final SetHorizontalKeystone_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetHorizontalKeystone);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetHorizontalKeystone_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetHorizontalKeystone_ARG_DesiredHorizontalKeystone, DesiredHorizontalKeystone, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetMute_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetMute(Long InstanceID, A_ARG_TYPE_Channel Channel, Boolean DesiredMute, final SetMute_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetMute);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetMute_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetMute_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetMute_ARG_DesiredMute, DesiredMute, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetBrightness_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetBrightness(Long InstanceID, Integer DesiredBrightness, final SetBrightness_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetBrightness);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetBrightness_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetBrightness_ARG_DesiredBrightness, DesiredBrightness, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetDefaultTransforms_CompletedHandler {
        void onSucceed(String theCurrentDefaultTransformSettings);
        void onFailed(int errCode, String description);
    }

    public int GetDefaultTransforms(final GetDefaultTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetDefaultTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }


            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentDefaultTransformSettings = invocation.getResult(_GetDefaultTransforms_ARG_CurrentDefaultTransformSettings);
                        if (pCurrentDefaultTransformSettings == null) {
                            Log.d(TAG, String.format("%s not found", _GetDefaultTransforms_ARG_CurrentDefaultTransformSettings));
                            break;
                        }

                        String theCurrentDefaultTransformSettings = (String) pCurrentDefaultTransformSettings.getCurrentValue();

                        handler.onSucceed(theCurrentDefaultTransformSettings);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetVerticalKeystone_CompletedHandler {
        void onSucceed(Integer theCurrentVerticalKeystone);
        void onFailed(int errCode, String description);
    }

    public int GetVerticalKeystone(Long InstanceID, final GetVerticalKeystone_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetVerticalKeystone);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetVerticalKeystone_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentVerticalKeystone = invocation.getResult(_GetVerticalKeystone_ARG_CurrentVerticalKeystone);
                        if (pCurrentVerticalKeystone == null) {
                            Log.d(TAG, String.format("%s not found", _GetVerticalKeystone_ARG_CurrentVerticalKeystone));
                            break;
                        }

                        Integer theCurrentVerticalKeystone = (Integer) pCurrentVerticalKeystone.getCurrentValue();

                        handler.onSucceed(theCurrentVerticalKeystone);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetVolumeDBRange_CompletedHandler {
        void onSucceed(Integer theMinValue,
                       Integer theMaxValue);
        void onFailed(int errCode, String description);
    }

    public int GetVolumeDBRange(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetVolumeDBRange_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetVolumeDBRange);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetVolumeDBRange_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetVolumeDBRange_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pMinValue = invocation.getResult(_GetVolumeDBRange_ARG_MinValue);
                        if (pMinValue == null) {
                            Log.d(TAG, String.format("%s not found", _GetVolumeDBRange_ARG_MinValue));
                            break;
                        }

                        Property pMaxValue = invocation.getResult(_GetVolumeDBRange_ARG_MaxValue);
                        if (pMaxValue == null) {
                            Log.d(TAG, String.format("%s not found", _GetVolumeDBRange_ARG_MaxValue));
                            break;
                        }

                        Integer theMinValue = (Integer) pMinValue.getCurrentValue();
                        Integer theMaxValue = (Integer) pMaxValue.getCurrentValue();

                        handler.onSucceed(theMinValue,
                                theMaxValue);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetBlueVideoBlackLevel_CompletedHandler {
        void onSucceed(Integer theCurrentBlueVideoBlackLevel);
        void onFailed(int errCode, String description);
    }

    public int GetBlueVideoBlackLevel(Long InstanceID, final GetBlueVideoBlackLevel_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetBlueVideoBlackLevel);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetBlueVideoBlackLevel_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentBlueVideoBlackLevel = invocation.getResult(_GetBlueVideoBlackLevel_ARG_CurrentBlueVideoBlackLevel);
                        if (pCurrentBlueVideoBlackLevel == null) {
                            Log.d(TAG, String.format("%s not found", _GetBlueVideoBlackLevel_ARG_CurrentBlueVideoBlackLevel));
                            break;
                        }

                        Integer theCurrentBlueVideoBlackLevel = (Integer) pCurrentBlueVideoBlackLevel.getCurrentValue();

                        handler.onSucceed(theCurrentBlueVideoBlackLevel);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetAllowedTransforms_CompletedHandler {
        void onSucceed(String theCurrentAllowedTransformSettings);
        void onFailed(int errCode, String description);
    }

    public int GetAllowedTransforms(Long InstanceID, final GetAllowedTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetAllowedTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetAllowedTransforms_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentAllowedTransformSettings = invocation.getResult(_GetAllowedTransforms_ARG_CurrentAllowedTransformSettings);
                        if (pCurrentAllowedTransformSettings == null) {
                            Log.d(TAG, String.format("%s not found", _GetAllowedTransforms_ARG_CurrentAllowedTransformSettings));
                            break;
                        }

                        String theCurrentAllowedTransformSettings = (String) pCurrentAllowedTransformSettings.getCurrentValue();

                        handler.onSucceed(theCurrentAllowedTransformSettings);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetBlueVideoGain_CompletedHandler {
        void onSucceed(Integer theCurrentBlueVideoGain);
        void onFailed(int errCode, String description);
    }

    public int GetBlueVideoGain(Long InstanceID, final GetBlueVideoGain_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetBlueVideoGain);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetBlueVideoGain_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentBlueVideoGain = invocation.getResult(_GetBlueVideoGain_ARG_CurrentBlueVideoGain);
                        if (pCurrentBlueVideoGain == null) {
                            Log.d(TAG, String.format("%s not found", _GetBlueVideoGain_ARG_CurrentBlueVideoGain));
                            break;
                        }

                        Integer theCurrentBlueVideoGain = (Integer) pCurrentBlueVideoGain.getCurrentValue();

                        handler.onSucceed(theCurrentBlueVideoGain);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetVerticalKeystone_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetVerticalKeystone(Long InstanceID, Integer DesiredVerticalKeystone, final SetVerticalKeystone_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetVerticalKeystone);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetVerticalKeystone_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetVerticalKeystone_ARG_DesiredVerticalKeystone, DesiredVerticalKeystone, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetGreenVideoBlackLevel_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetGreenVideoBlackLevel(Long InstanceID, Integer DesiredGreenVideoBlackLevel, final SetGreenVideoBlackLevel_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetGreenVideoBlackLevel);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetGreenVideoBlackLevel_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetGreenVideoBlackLevel_ARG_DesiredGreenVideoBlackLevel, DesiredGreenVideoBlackLevel, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetVolumeDB_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetVolumeDB(Long InstanceID, A_ARG_TYPE_Channel Channel, Integer DesiredVolume, final SetVolumeDB_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetVolumeDB);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetVolumeDB_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetVolumeDB_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetVolumeDB_ARG_DesiredVolume, DesiredVolume, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetSharpness_CompletedHandler {
        void onSucceed(Integer theCurrentSharpness);
        void onFailed(int errCode, String description);
    }

    public int GetSharpness(Long InstanceID, final GetSharpness_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetSharpness);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetSharpness_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentSharpness = invocation.getResult(_GetSharpness_ARG_CurrentSharpness);
                        if (pCurrentSharpness == null) {
                            Log.d(TAG, String.format("%s not found", _GetSharpness_ARG_CurrentSharpness));
                            break;
                        }

                        Integer theCurrentSharpness = (Integer) pCurrentSharpness.getCurrentValue();

                        handler.onSucceed(theCurrentSharpness);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetRedVideoBlackLevel_CompletedHandler {
        void onSucceed(Integer theCurrentRedVideoBlackLevel);
        void onFailed(int errCode, String description);
    }

    public int GetRedVideoBlackLevel(Long InstanceID, final GetRedVideoBlackLevel_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetRedVideoBlackLevel);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetRedVideoBlackLevel_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentRedVideoBlackLevel = invocation.getResult(_GetRedVideoBlackLevel_ARG_CurrentRedVideoBlackLevel);
                        if (pCurrentRedVideoBlackLevel == null) {
                            Log.d(TAG, String.format("%s not found", _GetRedVideoBlackLevel_ARG_CurrentRedVideoBlackLevel));
                            break;
                        }

                        Integer theCurrentRedVideoBlackLevel = (Integer) pCurrentRedVideoBlackLevel.getCurrentValue();

                        handler.onSucceed(theCurrentRedVideoBlackLevel);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetRedVideoGain_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetRedVideoGain(Long InstanceID, Integer DesiredRedVideoGain, final SetRedVideoGain_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetRedVideoGain);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetRedVideoGain_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetRedVideoGain_ARG_DesiredRedVideoGain, DesiredRedVideoGain, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetDefaultTransforms_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetDefaultTransforms(String DesiredDefaultTransformSettings, final SetDefaultTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetDefaultTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetDefaultTransforms_ARG_DesiredDefaultTransformSettings, DesiredDefaultTransformSettings, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetStateVariables_CompletedHandler {
        void onSucceed(String theStateVariableValuePairs);
        void onFailed(int errCode, String description);
    }

    public int GetStateVariables(Long InstanceID, String StateVariableList, final GetStateVariables_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetStateVariables);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetStateVariables_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetStateVariables_ARG_StateVariableList, StateVariableList, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pStateVariableValuePairs = invocation.getResult(_GetStateVariables_ARG_StateVariableValuePairs);
                        if (pStateVariableValuePairs == null) {
                            Log.d(TAG, String.format("%s not found", _GetStateVariables_ARG_StateVariableValuePairs));
                            break;
                        }

                        String theStateVariableValuePairs = (String) pStateVariableValuePairs.getCurrentValue();

                        handler.onSucceed(theStateVariableValuePairs);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetLoudness_CompletedHandler {
        void onSucceed(Boolean theCurrentLoudness);
        void onFailed(int errCode, String description);
    }

    public int GetLoudness(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetLoudness_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetLoudness);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetLoudness_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetLoudness_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentLoudness = invocation.getResult(_GetLoudness_ARG_CurrentLoudness);
                        if (pCurrentLoudness == null) {
                            Log.d(TAG, String.format("%s not found", _GetLoudness_ARG_CurrentLoudness));
                            break;
                        }

                        Boolean theCurrentLoudness = (Boolean) pCurrentLoudness.getCurrentValue();

                        handler.onSucceed(theCurrentLoudness);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetRedVideoBlackLevel_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetRedVideoBlackLevel(Long InstanceID, Integer DesiredRedVideoBlackLevel, final SetRedVideoBlackLevel_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetRedVideoBlackLevel);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetRedVideoBlackLevel_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetRedVideoBlackLevel_ARG_DesiredRedVideoBlackLevel, DesiredRedVideoBlackLevel, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetVolume_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetVolume(Long InstanceID, A_ARG_TYPE_Channel Channel, Integer DesiredVolume, final SetVolume_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetVolume);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetVolume_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetVolume_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetVolume_ARG_DesiredVolume, DesiredVolume, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetBlueVideoGain_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetBlueVideoGain(Long InstanceID, Integer DesiredBlueVideoGain, final SetBlueVideoGain_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetBlueVideoGain);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetBlueVideoGain_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetBlueVideoGain_ARG_DesiredBlueVideoGain, DesiredBlueVideoGain, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetTransforms_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetTransforms(Long InstanceID, String DesiredTransformValues, final SetTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetTransforms_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetTransforms_ARG_DesiredTransformValues, DesiredTransformValues, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetVolume_CompletedHandler {
        void onSucceed(Integer theCurrentVolume);
        void onFailed(int errCode, String description);
    }

    public int GetVolume(Long InstanceID, A_ARG_TYPE_Channel Channel, final GetVolume_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetVolume);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetVolume_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetVolume_ARG_Channel, Channel.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentVolume = invocation.getResult(_GetVolume_ARG_CurrentVolume);
                        if (pCurrentVolume == null) {
                            Log.d(TAG, String.format("%s not found", _GetVolume_ARG_CurrentVolume));
                            break;
                        }

                        Integer theCurrentVolume = (Integer) pCurrentVolume.getCurrentValue();

                        handler.onSucceed(theCurrentVolume);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetStateVariables_CompletedHandler {
        void onSucceed(String theStateVariableList);
        void onFailed(int errCode, String description);
    }

    public int SetStateVariables(Long InstanceID, String RenderingControlUDN, String ServiceType, String ServiceId, String StateVariableValuePairs, final SetStateVariables_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetStateVariables);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetStateVariables_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_RenderingControlUDN, RenderingControlUDN, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_ServiceType, ServiceType, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_ServiceId, ServiceId, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_StateVariableValuePairs, StateVariableValuePairs, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pStateVariableList = invocation.getResult(_SetStateVariables_ARG_StateVariableList);
                        if (pStateVariableList == null) {
                            Log.d(TAG, String.format("%s not found", _SetStateVariables_ARG_StateVariableList));
                            break;
                        }

                        String theStateVariableList = (String) pStateVariableList.getCurrentValue();

                        handler.onSucceed(theStateVariableList);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetRedVideoGain_CompletedHandler {
        void onSucceed(Integer theCurrentRedVideoGain);
        void onFailed(int errCode, String description);
    }

    public int GetRedVideoGain(Long InstanceID, final GetRedVideoGain_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetRedVideoGain);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetRedVideoGain_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentRedVideoGain = invocation.getResult(_GetRedVideoGain_ARG_CurrentRedVideoGain);
                        if (pCurrentRedVideoGain == null) {
                            Log.d(TAG, String.format("%s not found", _GetRedVideoGain_ARG_CurrentRedVideoGain));
                            break;
                        }

                        Integer theCurrentRedVideoGain = (Integer) pCurrentRedVideoGain.getCurrentValue();

                        handler.onSucceed(theCurrentRedVideoGain);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetBrightness_CompletedHandler {
        void onSucceed(Integer theCurrentBrightness);
        void onFailed(int errCode, String description);
    }

    public int GetBrightness(Long InstanceID, final GetBrightness_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetBrightness);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetBrightness_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentBrightness = invocation.getResult(_GetBrightness_ARG_CurrentBrightness);
                        if (pCurrentBrightness == null) {
                            Log.d(TAG, String.format("%s not found", _GetBrightness_ARG_CurrentBrightness));
                            break;
                        }

                        Integer theCurrentBrightness = (Integer) pCurrentBrightness.getCurrentValue();

                        handler.onSucceed(theCurrentBrightness);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetGreenVideoBlackLevel_CompletedHandler {
        void onSucceed(Integer theCurrentGreenVideoBlackLevel);
        void onFailed(int errCode, String description);
    }

    public int GetGreenVideoBlackLevel(Long InstanceID, final GetGreenVideoBlackLevel_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetGreenVideoBlackLevel);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetGreenVideoBlackLevel_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentGreenVideoBlackLevel = invocation.getResult(_GetGreenVideoBlackLevel_ARG_CurrentGreenVideoBlackLevel);
                        if (pCurrentGreenVideoBlackLevel == null) {
                            Log.d(TAG, String.format("%s not found", _GetGreenVideoBlackLevel_ARG_CurrentGreenVideoBlackLevel));
                            break;
                        }

                        Integer theCurrentGreenVideoBlackLevel = (Integer) pCurrentGreenVideoBlackLevel.getCurrentValue();

                        handler.onSucceed(theCurrentGreenVideoBlackLevel);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetGreenVideoGain_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetGreenVideoGain(Long InstanceID, Integer DesiredGreenVideoGain, final SetGreenVideoGain_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetGreenVideoGain);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetGreenVideoGain_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetGreenVideoGain_ARG_DesiredGreenVideoGain, DesiredGreenVideoGain, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetHorizontalKeystone_CompletedHandler {
        void onSucceed(Integer theCurrentHorizontalKeystone);
        void onFailed(int errCode, String description);
    }

    public int GetHorizontalKeystone(Long InstanceID, final GetHorizontalKeystone_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetHorizontalKeystone);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetHorizontalKeystone_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentHorizontalKeystone = invocation.getResult(_GetHorizontalKeystone_ARG_CurrentHorizontalKeystone);
                        if (pCurrentHorizontalKeystone == null) {
                            Log.d(TAG, String.format("%s not found", _GetHorizontalKeystone_ARG_CurrentHorizontalKeystone));
                            break;
                        }

                        Integer theCurrentHorizontalKeystone = (Integer) pCurrentHorizontalKeystone.getCurrentValue();

                        handler.onSucceed(theCurrentHorizontalKeystone);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetTransforms_CompletedHandler {
        void onSucceed(String theCurrentTransformValues);
        void onFailed(int errCode, String description);
    }

    public int GetTransforms(Long InstanceID, final GetTransforms_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetTransforms);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetTransforms_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentTransformValues = invocation.getResult(_GetTransforms_ARG_CurrentTransformValues);
                        if (pCurrentTransformValues == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransforms_ARG_CurrentTransformValues));
                            break;
                        }

                        String theCurrentTransformValues = (String) pCurrentTransformValues.getCurrentValue();

                        handler.onSucceed(theCurrentTransformValues);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SelectPreset_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SelectPreset(Long InstanceID, A_ARG_TYPE_PresetName PresetName, final SelectPreset_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SelectPreset);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SelectPreset_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SelectPreset_ARG_PresetName, PresetName.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onAllowedDefaultTransformSettingsChanged(String currentValue);
        void onDefaultTransformSettingsChanged(String currentValue);
        void onLastChangeChanged(String currentValue);
    }

    public int subscribe(final CompletionHandler handler, final EventListener listener) {
        int ret = ReturnCode.OK;

        do {
            if (this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            if (listener == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }


            ret = UpnpManager.getUpnp().subscribe(this.service,
                    new MyCompletionHandler() {

                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    },
                    new MyEventListener() {
                        @Override
                        public void onSubscriptionExpired(String serviceId) {
                            listener.onSubscriptionExpired();
                        }

                        @Override
                        public void onEvent(String serviceId, List<PropertyChanged> list) {
                            for (PropertyChanged c : list) {
                                if (c.getName().equals(PROPERTY_AllowedDefaultTransformSettings)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_AllowedDefaultTransformSettings);
                                    listener.onAllowedDefaultTransformSettingsChanged((String)def.getDataType().toObjectValue(c.getValue()));
                                }
                                if (c.getName().equals(PROPERTY_DefaultTransformSettings)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_DefaultTransformSettings);
                                    listener.onDefaultTransformSettingsChanged((String)def.getDataType().toObjectValue(c.getValue()));
                                }
                                if (c.getName().equals(PROPERTY_LastChange)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_LastChange);
                                    listener.onLastChangeChanged((String)def.getDataType().toObjectValue(c.getValue()));
                                }
                            }
                        }
                    });
        } while (false);

        return ret;
    }

    public int unsubscribe(final CompletionHandler handler) {
        int ret = ReturnCode.OK;

        do {
            if (! this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            ret = UpnpManager.getUpnp().unsubscribe(this.service,
                    new MyCompletionHandler() {
                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    });
        } while (false);

        return ret;
    }

}
