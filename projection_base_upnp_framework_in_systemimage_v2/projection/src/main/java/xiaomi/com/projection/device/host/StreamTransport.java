/* Automatic generated by DeviceToClazz */

package xiaomi.com.projection.device.host;

import android.util.Log;

import upnp.typedef.UpnpError;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.EventInfo;
import upnp.typedef.device.invocation.EventInfoCreator;
import upnp.typedef.exception.UpnpException;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.host.ServiceStub;

public class StreamTransport implements ServiceStub {
    private static final String TAG = "StreamTransport";

    //-------------------------------------------------------
    // Action Names (30)
    //-------------------------------------------------------
    public static final String ACTION_GetDRMState = "GetDRMState";
    public static final String _GetDRMState_ARG_InstanceID = "InstanceID";
    public static final String _GetDRMState_ARG_CurrentDRMState = "CurrentDRMState";
    public static final String ACTION_SyncStop = "SyncStop";
    public static final String _SyncStop_ARG_InstanceID = "InstanceID";
    public static final String _SyncStop_ARG_StopTime = "StopTime";
    public static final String _SyncStop_ARG_ReferenceClockId = "ReferenceClockId";
    public static final String ACTION_GetMediaInfo_Ext = "GetMediaInfo_Ext";
    public static final String _GetMediaInfo_Ext_ARG_InstanceID = "InstanceID";
    public static final String _GetMediaInfo_Ext_ARG_CurrentType = "CurrentType";
    public static final String _GetMediaInfo_Ext_ARG_NrTracks = "NrTracks";
    public static final String _GetMediaInfo_Ext_ARG_MediaDuration = "MediaDuration";
    public static final String _GetMediaInfo_Ext_ARG_CurrentURI = "CurrentURI";
    public static final String _GetMediaInfo_Ext_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String _GetMediaInfo_Ext_ARG_NextURI = "NextURI";
    public static final String _GetMediaInfo_Ext_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String _GetMediaInfo_Ext_ARG_PlayMedium = "PlayMedium";
    public static final String _GetMediaInfo_Ext_ARG_RecordMedium = "RecordMedium";
    public static final String _GetMediaInfo_Ext_ARG_WriteStatus = "WriteStatus";
    public static final String ACTION_Stop = "Stop";
    public static final String _Stop_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetTransportSettings = "GetTransportSettings";
    public static final String _GetTransportSettings_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportSettings_ARG_PlayMode = "PlayMode";
    public static final String _GetTransportSettings_ARG_RecQualityMode = "RecQualityMode";
    public static final String ACTION_SetSyncOffset = "SetSyncOffset";
    public static final String _SetSyncOffset_ARG_InstanceID = "InstanceID";
    public static final String _SetSyncOffset_ARG_NewSyncOffset = "NewSyncOffset";
    public static final String ACTION_SyncPause = "SyncPause";
    public static final String _SyncPause_ARG_InstanceID = "InstanceID";
    public static final String _SyncPause_ARG_PauseTime = "PauseTime";
    public static final String _SyncPause_ARG_ReferenceClockId = "ReferenceClockId";
    public static final String ACTION_GetPositionInfo = "GetPositionInfo";
    public static final String _GetPositionInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetPositionInfo_ARG_Track = "Track";
    public static final String _GetPositionInfo_ARG_TrackDuration = "TrackDuration";
    public static final String _GetPositionInfo_ARG_TrackMetaData = "TrackMetaData";
    public static final String _GetPositionInfo_ARG_TrackURI = "TrackURI";
    public static final String _GetPositionInfo_ARG_RelTime = "RelTime";
    public static final String _GetPositionInfo_ARG_AbsTime = "AbsTime";
    public static final String _GetPositionInfo_ARG_RelCount = "RelCount";
    public static final String _GetPositionInfo_ARG_AbsCount = "AbsCount";
    public static final String ACTION_GetPlaylistInfo = "GetPlaylistInfo";
    public static final String _GetPlaylistInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetPlaylistInfo_ARG_PlaylistType = "PlaylistType";
    public static final String _GetPlaylistInfo_ARG_PlaylistInfo = "PlaylistInfo";
    public static final String ACTION_SetNextAVTransportURI = "SetNextAVTransportURI";
    public static final String _SetNextAVTransportURI_ARG_InstanceID = "InstanceID";
    public static final String _SetNextAVTransportURI_ARG_NextURI = "NextURI";
    public static final String _SetNextAVTransportURI_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String ACTION_SetPlayMode = "SetPlayMode";
    public static final String _SetPlayMode_ARG_InstanceID = "InstanceID";
    public static final String _SetPlayMode_ARG_NewPlayMode = "NewPlayMode";
    public static final String ACTION_Seek = "Seek";
    public static final String _Seek_ARG_InstanceID = "InstanceID";
    public static final String _Seek_ARG_Unit = "Unit";
    public static final String _Seek_ARG_Target = "Target";
    public static final String ACTION_SetStaticPlaylist = "SetStaticPlaylist";
    public static final String _SetStaticPlaylist_ARG_InstanceID = "InstanceID";
    public static final String _SetStaticPlaylist_ARG_PlaylistData = "PlaylistData";
    public static final String _SetStaticPlaylist_ARG_PlaylistDataLength = "PlaylistDataLength";
    public static final String _SetStaticPlaylist_ARG_PlaylistOffset = "PlaylistOffset";
    public static final String _SetStaticPlaylist_ARG_PlaylistTotalLength = "PlaylistTotalLength";
    public static final String _SetStaticPlaylist_ARG_PlaylistMIMEType = "PlaylistMIMEType";
    public static final String _SetStaticPlaylist_ARG_PlaylistExtendedType = "PlaylistExtendedType";
    public static final String _SetStaticPlaylist_ARG_PlaylistStartObj = "PlaylistStartObj";
    public static final String _SetStaticPlaylist_ARG_PlaylistStartGroup = "PlaylistStartGroup";
    public static final String ACTION_Play = "Play";
    public static final String _Play_ARG_InstanceID = "InstanceID";
    public static final String _Play_ARG_Speed = "Speed";
    public static final String ACTION_GetMediaInfo = "GetMediaInfo";
    public static final String _GetMediaInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetMediaInfo_ARG_NrTracks = "NrTracks";
    public static final String _GetMediaInfo_ARG_MediaDuration = "MediaDuration";
    public static final String _GetMediaInfo_ARG_CurrentURI = "CurrentURI";
    public static final String _GetMediaInfo_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String _GetMediaInfo_ARG_NextURI = "NextURI";
    public static final String _GetMediaInfo_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String _GetMediaInfo_ARG_PlayMedium = "PlayMedium";
    public static final String _GetMediaInfo_ARG_RecordMedium = "RecordMedium";
    public static final String _GetMediaInfo_ARG_WriteStatus = "WriteStatus";
    public static final String ACTION_SetRecordQualityMode = "SetRecordQualityMode";
    public static final String _SetRecordQualityMode_ARG_InstanceID = "InstanceID";
    public static final String _SetRecordQualityMode_ARG_NewRecordQualityMode = "NewRecordQualityMode";
    public static final String ACTION_Next = "Next";
    public static final String _Next_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetStateVariables = "GetStateVariables";
    public static final String _GetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _GetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String _GetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String ACTION_GetSyncOffset = "GetSyncOffset";
    public static final String _GetSyncOffset_ARG_InstanceID = "InstanceID";
    public static final String _GetSyncOffset_ARG_CurrentSyncOffset = "CurrentSyncOffset";
    public static final String ACTION_Record = "Record";
    public static final String _Record_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetTransportInfo = "GetTransportInfo";
    public static final String _GetTransportInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportInfo_ARG_CurrentTransportState = "CurrentTransportState";
    public static final String _GetTransportInfo_ARG_CurrentTransportStatus = "CurrentTransportStatus";
    public static final String _GetTransportInfo_ARG_CurrentSpeed = "CurrentSpeed";
    public static final String ACTION_SyncPlay = "SyncPlay";
    public static final String _SyncPlay_ARG_InstanceID = "InstanceID";
    public static final String _SyncPlay_ARG_Speed = "Speed";
    public static final String _SyncPlay_ARG_ReferencePositionUnits = "ReferencePositionUnits";
    public static final String _SyncPlay_ARG_ReferencePosition = "ReferencePosition";
    public static final String _SyncPlay_ARG_ReferencePresentationTime = "ReferencePresentationTime";
    public static final String _SyncPlay_ARG_ReferenceClockId = "ReferenceClockId";
    public static final String ACTION_Previous = "Previous";
    public static final String _Previous_ARG_InstanceID = "InstanceID";
    public static final String ACTION_AdjustSyncOffset = "AdjustSyncOffset";
    public static final String _AdjustSyncOffset_ARG_InstanceID = "InstanceID";
    public static final String _AdjustSyncOffset_ARG_Adjustment = "Adjustment";
    public static final String ACTION_GetDeviceCapabilities = "GetDeviceCapabilities";
    public static final String _GetDeviceCapabilities_ARG_InstanceID = "InstanceID";
    public static final String _GetDeviceCapabilities_ARG_PlayMedia = "PlayMedia";
    public static final String _GetDeviceCapabilities_ARG_RecMedia = "RecMedia";
    public static final String _GetDeviceCapabilities_ARG_RecQualityModes = "RecQualityModes";
    public static final String ACTION_SetStateVariables = "SetStateVariables";
    public static final String _SetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _SetStateVariables_ARG_AVTransportUDN = "AVTransportUDN";
    public static final String _SetStateVariables_ARG_ServiceType = "ServiceType";
    public static final String _SetStateVariables_ARG_ServiceId = "ServiceId";
    public static final String _SetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String _SetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String ACTION_SetStreamingPlaylist = "SetStreamingPlaylist";
    public static final String _SetStreamingPlaylist_ARG_InstanceID = "InstanceID";
    public static final String _SetStreamingPlaylist_ARG_PlaylistData = "PlaylistData";
    public static final String _SetStreamingPlaylist_ARG_PlaylistDataLength = "PlaylistDataLength";
    public static final String _SetStreamingPlaylist_ARG_PlaylistMIMEType = "PlaylistMIMEType";
    public static final String _SetStreamingPlaylist_ARG_PlaylistExtendedType = "PlaylistExtendedType";
    public static final String _SetStreamingPlaylist_ARG_PlaylistStep = "PlaylistStep";
    public static final String ACTION_Pause = "Pause";
    public static final String _Pause_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetCurrentTransportActions = "GetCurrentTransportActions";
    public static final String _GetCurrentTransportActions_ARG_InstanceID = "InstanceID";
    public static final String _GetCurrentTransportActions_ARG_Actions = "Actions";
    public static final String ACTION_SetAVTransportURI = "SetAVTransportURI";
    public static final String _SetAVTransportURI_ARG_InstanceID = "InstanceID";
    public static final String _SetAVTransportURI_ARG_CurrentURI = "CurrentURI";
    public static final String _SetAVTransportURI_ARG_CurrentURIMetaData = "CurrentURIMetaData";

    //-------------------------------------------------------
    // Property Name (52)
    //-------------------------------------------------------
    public static final String PROPERTY_AbsoluteTimePosition = "AbsoluteTimePosition";
    public static final String PROPERTY_A_ARG_TYPE_SyncOffsetAdj = "A_ARG_TYPE_SyncOffsetAdj";
    public static final String PROPERTY_NextAVTransportURI = "NextAVTransportURI";
    public static final String PROPERTY_TransportPlaySpeed = "TransportPlaySpeed";
    public static final String PROPERTY_TransportState = "TransportState";
    public static final String PROPERTY_DRMState = "DRMState";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistExtendedType = "A_ARG_TYPE_PlaylistExtendedType";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistData = "A_ARG_TYPE_PlaylistData";
    public static final String PROPERTY_A_ARG_TYPE_ServiceID = "A_ARG_TYPE_ServiceID";
    public static final String PROPERTY_CurrentTrackURI = "CurrentTrackURI";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistInfo = "A_ARG_TYPE_PlaylistInfo";
    public static final String PROPERTY_A_ARG_TYPE_PresentationTime = "A_ARG_TYPE_PresentationTime";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistStep = "A_ARG_TYPE_PlaylistStep";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistStartGroupID = "A_ARG_TYPE_PlaylistStartGroupID";
    public static final String PROPERTY_CurrentTransportActions = "CurrentTransportActions";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistMIMEType = "A_ARG_TYPE_PlaylistMIMEType";
    public static final String PROPERTY_PlaybackStorageMedium = "PlaybackStorageMedium";
    public static final String PROPERTY_RelativeTimePosition = "RelativeTimePosition";
    public static final String PROPERTY_A_ARG_TYPE_ServiceType = "A_ARG_TYPE_ServiceType";
    public static final String PROPERTY_CurrentMediaDuration = "CurrentMediaDuration";
    public static final String PROPERTY_CurrentTrackMetaData = "CurrentTrackMetaData";
    public static final String PROPERTY_RelativeCounterPosition = "RelativeCounterPosition";
    public static final String PROPERTY_A_ARG_TYPE_SeekMode = "A_ARG_TYPE_SeekMode";
    public static final String PROPERTY_LastChange = "LastChange";
    public static final String PROPERTY_PossibleRecordStorageMedia = "PossibleRecordStorageMedia";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistType = "A_ARG_TYPE_PlaylistType";
    public static final String PROPERTY_A_ARG_TYPE_DeviceUDN = "A_ARG_TYPE_DeviceUDN";
    public static final String PROPERTY_CurrentTrackDuration = "CurrentTrackDuration";
    public static final String PROPERTY_PossiblePlaybackStorageMedia = "PossiblePlaybackStorageMedia";
    public static final String PROPERTY_A_ARG_TYPE_SeekTarget = "A_ARG_TYPE_SeekTarget";
    public static final String PROPERTY_AVTransportURIMetaData = "AVTransportURIMetaData";
    public static final String PROPERTY_CurrentMediaCategory = "CurrentMediaCategory";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_CurrentPlayMode = "CurrentPlayMode";
    public static final String PROPERTY_NumberOfTracks = "NumberOfTracks";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistTotalLength = "A_ARG_TYPE_PlaylistTotalLength";
    public static final String PROPERTY_RecordStorageMedium = "RecordStorageMedium";
    public static final String PROPERTY_TransportStatus = "TransportStatus";
    public static final String PROPERTY_AVTransportURI = "AVTransportURI";
    public static final String PROPERTY_SyncOffset = "SyncOffset";
    public static final String PROPERTY_RecordMediumWriteStatus = "RecordMediumWriteStatus";
    public static final String PROPERTY_A_ARG_TYPE_ClockId = "A_ARG_TYPE_ClockId";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistStartObjID = "A_ARG_TYPE_PlaylistStartObjID";
    public static final String PROPERTY_CurrentTrack = "CurrentTrack";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableValuePairs = "A_ARG_TYPE_StateVariableValuePairs";
    public static final String PROPERTY_AbsoluteCounterPosition = "AbsoluteCounterPosition";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableList = "A_ARG_TYPE_StateVariableList";
    public static final String PROPERTY_NextAVTransportURIMetaData = "NextAVTransportURIMetaData";
    public static final String PROPERTY_PossibleRecordQualityModes = "PossibleRecordQualityModes";
    public static final String PROPERTY_CurrentRecordQualityMode = "CurrentRecordQualityMode";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistOffset = "A_ARG_TYPE_PlaylistOffset";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistDataLength = "A_ARG_TYPE_PlaylistDataLength";

    //-------------------------------------------------------
    // Property value defined (9)
    //-------------------------------------------------------

    public enum TransportPlaySpeed {
        UNDEFINED,
        V_1;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_1 = "1";

        public static TransportPlaySpeed retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_1)) {
                return V_1;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_1:
                    value = CONST_V_1;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportState {
        UNDEFINED,
        V_STOPPED,
        V_PLAYING;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_STOPPED = "STOPPED";
        private static final String CONST_V_PLAYING = "PLAYING";

        public static TransportState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_STOPPED)) {
                return V_STOPPED;
            }

            if (value.equals(CONST_V_PLAYING)) {
                return V_PLAYING;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_STOPPED:
                    value = CONST_V_STOPPED;
                    break;

                case V_PLAYING:
                    value = CONST_V_PLAYING;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum DRMState {
        UNDEFINED,
        V_OK;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";

        public static DRMState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_PlaylistStep {
        UNDEFINED,
        V_Initial,
        V_Continue,
        V_Stop,
        V_Reset;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Initial = "Initial";
        private static final String CONST_V_Continue = "Continue";
        private static final String CONST_V_Stop = "Stop";
        private static final String CONST_V_Reset = "Reset";

        public static A_ARG_TYPE_PlaylistStep retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Initial)) {
                return V_Initial;
            }

            if (value.equals(CONST_V_Continue)) {
                return V_Continue;
            }

            if (value.equals(CONST_V_Stop)) {
                return V_Stop;
            }

            if (value.equals(CONST_V_Reset)) {
                return V_Reset;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Initial:
                    value = CONST_V_Initial;
                    break;

                case V_Continue:
                    value = CONST_V_Continue;
                    break;

                case V_Stop:
                    value = CONST_V_Stop;
                    break;

                case V_Reset:
                    value = CONST_V_Reset;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_SeekMode {
        UNDEFINED,
        V_TRACK_NR;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_TRACK_NR = "TRACK_NR";

        public static A_ARG_TYPE_SeekMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_TRACK_NR)) {
                return V_TRACK_NR;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_TRACK_NR:
                    value = CONST_V_TRACK_NR;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_PlaylistType {
        UNDEFINED,
        V_Static,
        V_Streaming;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Static = "Static";
        private static final String CONST_V_Streaming = "Streaming";

        public static A_ARG_TYPE_PlaylistType retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Static)) {
                return V_Static;
            }

            if (value.equals(CONST_V_Streaming)) {
                return V_Streaming;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Static:
                    value = CONST_V_Static;
                    break;

                case V_Streaming:
                    value = CONST_V_Streaming;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentMediaCategory {
        UNDEFINED,
        V_NO_MEDIA,
        V_TRACK_AWARE,
        V_TRACK_UNAWARE,
        V_STEAM_PROJECTION;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NO_MEDIA = "NO_MEDIA";
        private static final String CONST_V_TRACK_AWARE = "TRACK_AWARE";
        private static final String CONST_V_TRACK_UNAWARE = "TRACK_UNAWARE";
        private static final String CONST_V_STEAM_PROJECTION = "STEAM_PROJECTION";

        public static CurrentMediaCategory retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NO_MEDIA)) {
                return V_NO_MEDIA;
            }

            if (value.equals(CONST_V_TRACK_AWARE)) {
                return V_TRACK_AWARE;
            }

            if (value.equals(CONST_V_TRACK_UNAWARE)) {
                return V_TRACK_UNAWARE;
            }

            if (value.equals(CONST_V_STEAM_PROJECTION)) {
                return V_STEAM_PROJECTION;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NO_MEDIA:
                    value = CONST_V_NO_MEDIA;
                    break;

                case V_TRACK_AWARE:
                    value = CONST_V_TRACK_AWARE;
                    break;

                case V_TRACK_UNAWARE:
                    value = CONST_V_TRACK_UNAWARE;
                    break;

                case V_STEAM_PROJECTION:
                    value = CONST_V_STEAM_PROJECTION;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentPlayMode {
        UNDEFINED,
        V_NORMAL;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NORMAL = "NORMAL";

        public static CurrentPlayMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NORMAL)) {
                return V_NORMAL;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NORMAL:
                    value = CONST_V_NORMAL;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportStatus {
        UNDEFINED,
        V_OK,
        V_ERROR_OCCURRED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ERROR_OCCURRED = "ERROR_OCCURRED";

        public static TransportStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ERROR_OCCURRED)) {
                return V_ERROR_OCCURRED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ERROR_OCCURRED:
                    value = CONST_V_ERROR_OCCURRED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // Action Result (30)
    //-------------------------------------------------------

    public class GetDRMState_Result {
        public DRMState theCurrentDRMState;
    }

    // SyncStop has no Result

    public class GetMediaInfo_Ext_Result {
        public CurrentMediaCategory theCurrentType;
        public Long theNrTracks;
        public String theMediaDuration;
        public String theCurrentURI;
        public String theCurrentURIMetaData;
        public String theNextURI;
        public String theNextURIMetaData;
        public String thePlayMedium;
        public String theRecordMedium;
        public String theWriteStatus;
    }

    // Stop has no Result

    public class GetTransportSettings_Result {
        public CurrentPlayMode thePlayMode;
        public String theRecQualityMode;
    }

    // SetSyncOffset has no Result

    // SyncPause has no Result

    public class GetPositionInfo_Result {
        public Long theTrack;
        public String theTrackDuration;
        public String theTrackMetaData;
        public String theTrackURI;
        public String theRelTime;
        public String theAbsTime;
        public Integer theRelCount;
        public Long theAbsCount;
    }

    public class GetPlaylistInfo_Result {
        public String thePlaylistInfo;
    }

    // SetNextAVTransportURI has no Result

    // SetPlayMode has no Result

    // Seek has no Result

    // SetStaticPlaylist has no Result

    // Play has no Result

    public class GetMediaInfo_Result {
        public Long theNrTracks;
        public String theMediaDuration;
        public String theCurrentURI;
        public String theCurrentURIMetaData;
        public String theNextURI;
        public String theNextURIMetaData;
        public String thePlayMedium;
        public String theRecordMedium;
        public String theWriteStatus;
    }

    // SetRecordQualityMode has no Result

    // Next has no Result

    public class GetStateVariables_Result {
        public String theStateVariableValuePairs;
    }

    public class GetSyncOffset_Result {
        public String theCurrentSyncOffset;
    }

    // Record has no Result

    public class GetTransportInfo_Result {
        public TransportState theCurrentTransportState;
        public TransportStatus theCurrentTransportStatus;
        public TransportPlaySpeed theCurrentSpeed;
    }

    // SyncPlay has no Result

    // Previous has no Result

    // AdjustSyncOffset has no Result

    public class GetDeviceCapabilities_Result {
        public String thePlayMedia;
        public String theRecMedia;
        public String theRecQualityModes;
    }

    public class SetStateVariables_Result {
        public String theStateVariableList;
    }

    // SetStreamingPlaylist has no Result

    // Pause has no Result

    public class GetCurrentTransportActions_Result {
        public String theActions;
    }

    // SetAVTransportURI has no Result


    //-------------------------------------------------------
    // Action Handler (30)
    //-------------------------------------------------------

    public interface Handler {
        int onGetDRMState(Long theInstanceID, GetDRMState_Result result);
        int onSyncStop(Long theInstanceID, String theStopTime, String theReferenceClockId);
        int onGetMediaInfo_Ext(Long theInstanceID, GetMediaInfo_Ext_Result result);
        int onStop(Long theInstanceID);
        int onGetTransportSettings(Long theInstanceID, GetTransportSettings_Result result);
        int onSetSyncOffset(Long theInstanceID, String theNewSyncOffset);
        int onSyncPause(Long theInstanceID, String thePauseTime, String theReferenceClockId);
        int onGetPositionInfo(Long theInstanceID, GetPositionInfo_Result result);
        int onGetPlaylistInfo(Long theInstanceID, A_ARG_TYPE_PlaylistType thePlaylistType, GetPlaylistInfo_Result result);
        int onSetNextAVTransportURI(Long theInstanceID, String theNextURI, String theNextURIMetaData);
        int onSetPlayMode(Long theInstanceID, CurrentPlayMode theNewPlayMode);
        int onSeek(Long theInstanceID, A_ARG_TYPE_SeekMode theUnit, String theTarget);
        int onSetStaticPlaylist(Long theInstanceID, String thePlaylistData, Long thePlaylistDataLength, Long thePlaylistOffset, Long thePlaylistTotalLength, String thePlaylistMIMEType, String thePlaylistExtendedType, String thePlaylistStartObj, String thePlaylistStartGroup);
        int onPlay(Long theInstanceID, TransportPlaySpeed theSpeed);
        int onGetMediaInfo(Long theInstanceID, GetMediaInfo_Result result);
        int onSetRecordQualityMode(Long theInstanceID, String theNewRecordQualityMode);
        int onNext(Long theInstanceID);
        int onGetStateVariables(Long theInstanceID, String theStateVariableList, GetStateVariables_Result result);
        int onGetSyncOffset(Long theInstanceID, GetSyncOffset_Result result);
        int onRecord(Long theInstanceID);
        int onGetTransportInfo(Long theInstanceID, GetTransportInfo_Result result);
        int onSyncPlay(Long theInstanceID, TransportPlaySpeed theSpeed, A_ARG_TYPE_SeekMode theReferencePositionUnits, String theReferencePosition, String theReferencePresentationTime, String theReferenceClockId);
        int onPrevious(Long theInstanceID);
        int onAdjustSyncOffset(Long theInstanceID, String theAdjustment);
        int onGetDeviceCapabilities(Long theInstanceID, GetDeviceCapabilities_Result result);
        int onSetStateVariables(Long theInstanceID, String theAVTransportUDN, String theServiceType, String theServiceId, String theStateVariableValuePairs, SetStateVariables_Result result);
        int onSetStreamingPlaylist(Long theInstanceID, String thePlaylistData, Long thePlaylistDataLength, String thePlaylistMIMEType, String thePlaylistExtendedType, A_ARG_TYPE_PlaylistStep thePlaylistStep);
        int onPause(Long theInstanceID);
        int onGetCurrentTransportActions(Long theInstanceID, GetCurrentTransportActions_Result result);
        int onSetAVTransportURI(Long theInstanceID, String theCurrentURI, String theCurrentURIMetaData);
    }

    private int handle_GetDRMState(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetDRMState_ARG_InstanceID);
        GetDRMState_Result result = new GetDRMState_Result();

        int error = _handler.onGetDRMState(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetDRMState_ARG_CurrentDRMState, result.theCurrentDRMState.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SyncStop(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SyncStop_ARG_InstanceID);
        String theStopTime = (String)info.getArgumentValue(_SyncStop_ARG_StopTime);
        String theReferenceClockId = (String)info.getArgumentValue(_SyncStop_ARG_ReferenceClockId);

        int error = _handler.onSyncStop(theInstanceID, theStopTime, theReferenceClockId);

        return error;
    }

    private int handle_GetMediaInfo_Ext(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetMediaInfo_Ext_ARG_InstanceID);
        GetMediaInfo_Ext_Result result = new GetMediaInfo_Ext_Result();

        int error = _handler.onGetMediaInfo_Ext(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_CurrentType, result.theCurrentType.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_NrTracks, result.theNrTracks, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_MediaDuration, result.theMediaDuration, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_CurrentURI, result.theCurrentURI, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_CurrentURIMetaData, result.theCurrentURIMetaData, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_NextURI, result.theNextURI, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_NextURIMetaData, result.theNextURIMetaData, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_PlayMedium, result.thePlayMedium, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_RecordMedium, result.theRecordMedium, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_Ext_ARG_WriteStatus, result.theWriteStatus, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_Stop(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Stop_ARG_InstanceID);

        int error = _handler.onStop(theInstanceID);

        return error;
    }

    private int handle_GetTransportSettings(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetTransportSettings_ARG_InstanceID);
        GetTransportSettings_Result result = new GetTransportSettings_Result();

        int error = _handler.onGetTransportSettings(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetTransportSettings_ARG_PlayMode, result.thePlayMode.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetTransportSettings_ARG_RecQualityMode, result.theRecQualityMode, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetSyncOffset(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetSyncOffset_ARG_InstanceID);
        String theNewSyncOffset = (String)info.getArgumentValue(_SetSyncOffset_ARG_NewSyncOffset);

        int error = _handler.onSetSyncOffset(theInstanceID, theNewSyncOffset);

        return error;
    }

    private int handle_SyncPause(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SyncPause_ARG_InstanceID);
        String thePauseTime = (String)info.getArgumentValue(_SyncPause_ARG_PauseTime);
        String theReferenceClockId = (String)info.getArgumentValue(_SyncPause_ARG_ReferenceClockId);

        int error = _handler.onSyncPause(theInstanceID, thePauseTime, theReferenceClockId);

        return error;
    }

    private int handle_GetPositionInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetPositionInfo_ARG_InstanceID);
        GetPositionInfo_Result result = new GetPositionInfo_Result();

        int error = _handler.onGetPositionInfo(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetPositionInfo_ARG_Track, result.theTrack, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_TrackDuration, result.theTrackDuration, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_TrackMetaData, result.theTrackMetaData, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_TrackURI, result.theTrackURI, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_RelTime, result.theRelTime, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_AbsTime, result.theAbsTime, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_RelCount, result.theRelCount, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetPositionInfo_ARG_AbsCount, result.theAbsCount, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetPlaylistInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetPlaylistInfo_ARG_InstanceID);
        A_ARG_TYPE_PlaylistType thePlaylistType = A_ARG_TYPE_PlaylistType.retrieveType((String)info.getArgumentValue(_GetPlaylistInfo_ARG_PlaylistType));
        GetPlaylistInfo_Result result = new GetPlaylistInfo_Result();

        int error = _handler.onGetPlaylistInfo(theInstanceID, thePlaylistType, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetPlaylistInfo_ARG_PlaylistInfo, result.thePlaylistInfo, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetNextAVTransportURI(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetNextAVTransportURI_ARG_InstanceID);
        String theNextURI = (String)info.getArgumentValue(_SetNextAVTransportURI_ARG_NextURI);
        String theNextURIMetaData = (String)info.getArgumentValue(_SetNextAVTransportURI_ARG_NextURIMetaData);

        int error = _handler.onSetNextAVTransportURI(theInstanceID, theNextURI, theNextURIMetaData);

        return error;
    }

    private int handle_SetPlayMode(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetPlayMode_ARG_InstanceID);
        CurrentPlayMode theNewPlayMode = CurrentPlayMode.retrieveType((String)info.getArgumentValue(_SetPlayMode_ARG_NewPlayMode));

        int error = _handler.onSetPlayMode(theInstanceID, theNewPlayMode);

        return error;
    }

    private int handle_Seek(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Seek_ARG_InstanceID);
        A_ARG_TYPE_SeekMode theUnit = A_ARG_TYPE_SeekMode.retrieveType((String)info.getArgumentValue(_Seek_ARG_Unit));
        String theTarget = (String)info.getArgumentValue(_Seek_ARG_Target);

        int error = _handler.onSeek(theInstanceID, theUnit, theTarget);

        return error;
    }

    private int handle_SetStaticPlaylist(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetStaticPlaylist_ARG_InstanceID);
        String thePlaylistData = (String)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistData);
        Long thePlaylistDataLength = (Long)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistDataLength);
        Long thePlaylistOffset = (Long)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistOffset);
        Long thePlaylistTotalLength = (Long)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistTotalLength);
        String thePlaylistMIMEType = (String)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistMIMEType);
        String thePlaylistExtendedType = (String)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistExtendedType);
        String thePlaylistStartObj = (String)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistStartObj);
        String thePlaylistStartGroup = (String)info.getArgumentValue(_SetStaticPlaylist_ARG_PlaylistStartGroup);

        int error = _handler.onSetStaticPlaylist(theInstanceID, thePlaylistData, thePlaylistDataLength, thePlaylistOffset, thePlaylistTotalLength, thePlaylistMIMEType, thePlaylistExtendedType, thePlaylistStartObj, thePlaylistStartGroup);

        return error;
    }

    private int handle_Play(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Play_ARG_InstanceID);
        TransportPlaySpeed theSpeed = TransportPlaySpeed.retrieveType((String)info.getArgumentValue(_Play_ARG_Speed));

        int error = _handler.onPlay(theInstanceID, theSpeed);

        return error;
    }

    private int handle_GetMediaInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetMediaInfo_ARG_InstanceID);
        GetMediaInfo_Result result = new GetMediaInfo_Result();

        int error = _handler.onGetMediaInfo(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetMediaInfo_ARG_NrTracks, result.theNrTracks, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_MediaDuration, result.theMediaDuration, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_CurrentURI, result.theCurrentURI, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_CurrentURIMetaData, result.theCurrentURIMetaData, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_NextURI, result.theNextURI, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_NextURIMetaData, result.theNextURIMetaData, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_PlayMedium, result.thePlayMedium, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_RecordMedium, result.theRecordMedium, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetMediaInfo_ARG_WriteStatus, result.theWriteStatus, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetRecordQualityMode(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetRecordQualityMode_ARG_InstanceID);
        String theNewRecordQualityMode = (String)info.getArgumentValue(_SetRecordQualityMode_ARG_NewRecordQualityMode);

        int error = _handler.onSetRecordQualityMode(theInstanceID, theNewRecordQualityMode);

        return error;
    }

    private int handle_Next(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Next_ARG_InstanceID);

        int error = _handler.onNext(theInstanceID);

        return error;
    }

    private int handle_GetStateVariables(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetStateVariables_ARG_InstanceID);
        String theStateVariableList = (String)info.getArgumentValue(_GetStateVariables_ARG_StateVariableList);
        GetStateVariables_Result result = new GetStateVariables_Result();

        int error = _handler.onGetStateVariables(theInstanceID, theStateVariableList, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetStateVariables_ARG_StateVariableValuePairs, result.theStateVariableValuePairs, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetSyncOffset(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetSyncOffset_ARG_InstanceID);
        GetSyncOffset_Result result = new GetSyncOffset_Result();

        int error = _handler.onGetSyncOffset(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetSyncOffset_ARG_CurrentSyncOffset, result.theCurrentSyncOffset, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_Record(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Record_ARG_InstanceID);

        int error = _handler.onRecord(theInstanceID);

        return error;
    }

    private int handle_GetTransportInfo(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetTransportInfo_ARG_InstanceID);
        GetTransportInfo_Result result = new GetTransportInfo_Result();

        int error = _handler.onGetTransportInfo(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetTransportInfo_ARG_CurrentTransportState, result.theCurrentTransportState.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetTransportInfo_ARG_CurrentTransportStatus, result.theCurrentTransportStatus.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetTransportInfo_ARG_CurrentSpeed, result.theCurrentSpeed.getValue(), Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SyncPlay(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SyncPlay_ARG_InstanceID);
        TransportPlaySpeed theSpeed = TransportPlaySpeed.retrieveType((String)info.getArgumentValue(_SyncPlay_ARG_Speed));
        A_ARG_TYPE_SeekMode theReferencePositionUnits = A_ARG_TYPE_SeekMode.retrieveType((String)info.getArgumentValue(_SyncPlay_ARG_ReferencePositionUnits));
        String theReferencePosition = (String)info.getArgumentValue(_SyncPlay_ARG_ReferencePosition);
        String theReferencePresentationTime = (String)info.getArgumentValue(_SyncPlay_ARG_ReferencePresentationTime);
        String theReferenceClockId = (String)info.getArgumentValue(_SyncPlay_ARG_ReferenceClockId);

        int error = _handler.onSyncPlay(theInstanceID, theSpeed, theReferencePositionUnits, theReferencePosition, theReferencePresentationTime, theReferenceClockId);

        return error;
    }

    private int handle_Previous(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Previous_ARG_InstanceID);

        int error = _handler.onPrevious(theInstanceID);

        return error;
    }

    private int handle_AdjustSyncOffset(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_AdjustSyncOffset_ARG_InstanceID);
        String theAdjustment = (String)info.getArgumentValue(_AdjustSyncOffset_ARG_Adjustment);

        int error = _handler.onAdjustSyncOffset(theInstanceID, theAdjustment);

        return error;
    }

    private int handle_GetDeviceCapabilities(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetDeviceCapabilities_ARG_InstanceID);
        GetDeviceCapabilities_Result result = new GetDeviceCapabilities_Result();

        int error = _handler.onGetDeviceCapabilities(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetDeviceCapabilities_ARG_PlayMedia, result.thePlayMedia, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetDeviceCapabilities_ARG_RecMedia, result.theRecMedia, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetDeviceCapabilities_ARG_RecQualityModes, result.theRecQualityModes, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetStateVariables(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetStateVariables_ARG_InstanceID);
        String theAVTransportUDN = (String)info.getArgumentValue(_SetStateVariables_ARG_AVTransportUDN);
        String theServiceType = (String)info.getArgumentValue(_SetStateVariables_ARG_ServiceType);
        String theServiceId = (String)info.getArgumentValue(_SetStateVariables_ARG_ServiceId);
        String theStateVariableValuePairs = (String)info.getArgumentValue(_SetStateVariables_ARG_StateVariableValuePairs);
        SetStateVariables_Result result = new SetStateVariables_Result();

        int error = _handler.onSetStateVariables(theInstanceID, theAVTransportUDN, theServiceType, theServiceId, theStateVariableValuePairs, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_SetStateVariables_ARG_StateVariableList, result.theStateVariableList, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetStreamingPlaylist(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetStreamingPlaylist_ARG_InstanceID);
        String thePlaylistData = (String)info.getArgumentValue(_SetStreamingPlaylist_ARG_PlaylistData);
        Long thePlaylistDataLength = (Long)info.getArgumentValue(_SetStreamingPlaylist_ARG_PlaylistDataLength);
        String thePlaylistMIMEType = (String)info.getArgumentValue(_SetStreamingPlaylist_ARG_PlaylistMIMEType);
        String thePlaylistExtendedType = (String)info.getArgumentValue(_SetStreamingPlaylist_ARG_PlaylistExtendedType);
        A_ARG_TYPE_PlaylistStep thePlaylistStep = A_ARG_TYPE_PlaylistStep.retrieveType((String)info.getArgumentValue(_SetStreamingPlaylist_ARG_PlaylistStep));

        int error = _handler.onSetStreamingPlaylist(theInstanceID, thePlaylistData, thePlaylistDataLength, thePlaylistMIMEType, thePlaylistExtendedType, thePlaylistStep);

        return error;
    }

    private int handle_Pause(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_Pause_ARG_InstanceID);

        int error = _handler.onPause(theInstanceID);

        return error;
    }

    private int handle_GetCurrentTransportActions(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetCurrentTransportActions_ARG_InstanceID);
        GetCurrentTransportActions_Result result = new GetCurrentTransportActions_Result();

        int error = _handler.onGetCurrentTransportActions(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetCurrentTransportActions_ARG_Actions, result.theActions, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetAVTransportURI(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetAVTransportURI_ARG_InstanceID);
        String theCurrentURI = (String)info.getArgumentValue(_SetAVTransportURI_ARG_CurrentURI);
        String theCurrentURIMetaData = (String)info.getArgumentValue(_SetAVTransportURI_ARG_CurrentURIMetaData);

        int error = _handler.onSetAVTransportURI(theInstanceID, theCurrentURI, theCurrentURIMetaData);

        return error;
    }

    //-------------------------------------------------------
    // Method
    //-------------------------------------------------------

    private Service _service;
    private Handler _handler;

    public StreamTransport(Service service) {
        _service = service;
    }

    public void setHandler(Handler handler) {
        _handler = handler;
    }

    @Override
    public int onAction(ActionInfo info) {
        if (_handler == null) {
           Log.e(TAG, "handler is null");
           return UpnpError.E_ACTION_NOT_IMPLEMENTED;
        }

        if (info.getAction().getName().equals(ACTION_GetDRMState)) {
            return handle_GetDRMState(info);
        }

        if (info.getAction().getName().equals(ACTION_SyncStop)) {
            return handle_SyncStop(info);
        }

        if (info.getAction().getName().equals(ACTION_GetMediaInfo_Ext)) {
            return handle_GetMediaInfo_Ext(info);
        }

        if (info.getAction().getName().equals(ACTION_Stop)) {
            return handle_Stop(info);
        }

        if (info.getAction().getName().equals(ACTION_GetTransportSettings)) {
            return handle_GetTransportSettings(info);
        }

        if (info.getAction().getName().equals(ACTION_SetSyncOffset)) {
            return handle_SetSyncOffset(info);
        }

        if (info.getAction().getName().equals(ACTION_SyncPause)) {
            return handle_SyncPause(info);
        }

        if (info.getAction().getName().equals(ACTION_GetPositionInfo)) {
            return handle_GetPositionInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_GetPlaylistInfo)) {
            return handle_GetPlaylistInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_SetNextAVTransportURI)) {
            return handle_SetNextAVTransportURI(info);
        }

        if (info.getAction().getName().equals(ACTION_SetPlayMode)) {
            return handle_SetPlayMode(info);
        }

        if (info.getAction().getName().equals(ACTION_Seek)) {
            return handle_Seek(info);
        }

        if (info.getAction().getName().equals(ACTION_SetStaticPlaylist)) {
            return handle_SetStaticPlaylist(info);
        }

        if (info.getAction().getName().equals(ACTION_Play)) {
            return handle_Play(info);
        }

        if (info.getAction().getName().equals(ACTION_GetMediaInfo)) {
            return handle_GetMediaInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_SetRecordQualityMode)) {
            return handle_SetRecordQualityMode(info);
        }

        if (info.getAction().getName().equals(ACTION_Next)) {
            return handle_Next(info);
        }

        if (info.getAction().getName().equals(ACTION_GetStateVariables)) {
            return handle_GetStateVariables(info);
        }

        if (info.getAction().getName().equals(ACTION_GetSyncOffset)) {
            return handle_GetSyncOffset(info);
        }

        if (info.getAction().getName().equals(ACTION_Record)) {
            return handle_Record(info);
        }

        if (info.getAction().getName().equals(ACTION_GetTransportInfo)) {
            return handle_GetTransportInfo(info);
        }

        if (info.getAction().getName().equals(ACTION_SyncPlay)) {
            return handle_SyncPlay(info);
        }

        if (info.getAction().getName().equals(ACTION_Previous)) {
            return handle_Previous(info);
        }

        if (info.getAction().getName().equals(ACTION_AdjustSyncOffset)) {
            return handle_AdjustSyncOffset(info);
        }

        if (info.getAction().getName().equals(ACTION_GetDeviceCapabilities)) {
            return handle_GetDeviceCapabilities(info);
        }

        if (info.getAction().getName().equals(ACTION_SetStateVariables)) {
            return handle_SetStateVariables(info);
        }

        if (info.getAction().getName().equals(ACTION_SetStreamingPlaylist)) {
            return handle_SetStreamingPlaylist(info);
        }

        if (info.getAction().getName().equals(ACTION_Pause)) {
            return handle_Pause(info);
        }

        if (info.getAction().getName().equals(ACTION_GetCurrentTransportActions)) {
            return handle_GetCurrentTransportActions(info);
        }

        if (info.getAction().getName().equals(ACTION_SetAVTransportURI)) {
            return handle_SetAVTransportURI(info);
        }

        return UpnpError.E_ACTION_NOT_IMPLEMENTED;
    }

    public void sendEvents() {
        EventInfo info = EventInfoCreator.create(_service);

        try {
            UpnpManager.getUpnp().sendEvents(info);
        } catch (UpnpException e) {
            e.printStackTrace();
        }
    }

    public void setTransportState(TransportState theTransportState) {
         _service.setPropertyValue(PROPERTY_TransportState, theTransportState.getValue());
    }

    public void setLastChange(String theLastChange) {
         _service.setPropertyValue(PROPERTY_LastChange, theLastChange);
    }

}
