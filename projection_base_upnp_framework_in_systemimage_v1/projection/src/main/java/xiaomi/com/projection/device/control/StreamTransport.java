/* Automatic generated by DeviceToClazz */

package xiaomi.com.projection.device.control;

import android.util.Log;

import java.util.List;

import upnp.typedef.ReturnCode;
import upnp.typedef.device.Argument;
import upnp.typedef.device.PropertyChanged;
import upnp.typedef.device.Service;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.ActionInfoCreator;
import upnp.typedef.property.Property;
import upnp.typedef.property.PropertyDefinition;
import upnps.api.manager.UpnpManager;
import upnps.api.manager.ctrlpoint.device.AbstractService;
import upnps.api.manager.handler.MyCompletionHandler;
import upnps.api.manager.handler.MyEventListener;
import upnps.api.manager.handler.MyInvokeCompletionHandler;

public class StreamTransport extends AbstractService {

    private static final String TAG = "StreamTransport";

    public StreamTransport(Service service) {
        super(service);
    }

    //-------------------------------------------------------
    // Action Names (30)
    //-------------------------------------------------------
    public static final String ACTION_GetDRMState = "GetDRMState";
    public static final String _GetDRMState_ARG_InstanceID = "InstanceID";
    public static final String _GetDRMState_ARG_CurrentDRMState = "CurrentDRMState";
    public static final String ACTION_SyncStop = "SyncStop";
    public static final String _SyncStop_ARG_InstanceID = "InstanceID";
    public static final String _SyncStop_ARG_StopTime = "StopTime";
    public static final String _SyncStop_ARG_ReferenceClockId = "ReferenceClockId";
    public static final String ACTION_GetMediaInfo_Ext = "GetMediaInfo_Ext";
    public static final String _GetMediaInfo_Ext_ARG_InstanceID = "InstanceID";
    public static final String _GetMediaInfo_Ext_ARG_CurrentType = "CurrentType";
    public static final String _GetMediaInfo_Ext_ARG_NrTracks = "NrTracks";
    public static final String _GetMediaInfo_Ext_ARG_MediaDuration = "MediaDuration";
    public static final String _GetMediaInfo_Ext_ARG_CurrentURI = "CurrentURI";
    public static final String _GetMediaInfo_Ext_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String _GetMediaInfo_Ext_ARG_NextURI = "NextURI";
    public static final String _GetMediaInfo_Ext_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String _GetMediaInfo_Ext_ARG_PlayMedium = "PlayMedium";
    public static final String _GetMediaInfo_Ext_ARG_RecordMedium = "RecordMedium";
    public static final String _GetMediaInfo_Ext_ARG_WriteStatus = "WriteStatus";
    public static final String ACTION_Stop = "Stop";
    public static final String _Stop_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetTransportSettings = "GetTransportSettings";
    public static final String _GetTransportSettings_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportSettings_ARG_PlayMode = "PlayMode";
    public static final String _GetTransportSettings_ARG_RecQualityMode = "RecQualityMode";
    public static final String ACTION_SetSyncOffset = "SetSyncOffset";
    public static final String _SetSyncOffset_ARG_InstanceID = "InstanceID";
    public static final String _SetSyncOffset_ARG_NewSyncOffset = "NewSyncOffset";
    public static final String ACTION_SyncPause = "SyncPause";
    public static final String _SyncPause_ARG_InstanceID = "InstanceID";
    public static final String _SyncPause_ARG_PauseTime = "PauseTime";
    public static final String _SyncPause_ARG_ReferenceClockId = "ReferenceClockId";
    public static final String ACTION_GetPositionInfo = "GetPositionInfo";
    public static final String _GetPositionInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetPositionInfo_ARG_Track = "Track";
    public static final String _GetPositionInfo_ARG_TrackDuration = "TrackDuration";
    public static final String _GetPositionInfo_ARG_TrackMetaData = "TrackMetaData";
    public static final String _GetPositionInfo_ARG_TrackURI = "TrackURI";
    public static final String _GetPositionInfo_ARG_RelTime = "RelTime";
    public static final String _GetPositionInfo_ARG_AbsTime = "AbsTime";
    public static final String _GetPositionInfo_ARG_RelCount = "RelCount";
    public static final String _GetPositionInfo_ARG_AbsCount = "AbsCount";
    public static final String ACTION_GetPlaylistInfo = "GetPlaylistInfo";
    public static final String _GetPlaylistInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetPlaylistInfo_ARG_PlaylistType = "PlaylistType";
    public static final String _GetPlaylistInfo_ARG_PlaylistInfo = "PlaylistInfo";
    public static final String ACTION_SetNextAVTransportURI = "SetNextAVTransportURI";
    public static final String _SetNextAVTransportURI_ARG_InstanceID = "InstanceID";
    public static final String _SetNextAVTransportURI_ARG_NextURI = "NextURI";
    public static final String _SetNextAVTransportURI_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String ACTION_SetPlayMode = "SetPlayMode";
    public static final String _SetPlayMode_ARG_InstanceID = "InstanceID";
    public static final String _SetPlayMode_ARG_NewPlayMode = "NewPlayMode";
    public static final String ACTION_Seek = "Seek";
    public static final String _Seek_ARG_InstanceID = "InstanceID";
    public static final String _Seek_ARG_Unit = "Unit";
    public static final String _Seek_ARG_Target = "Target";
    public static final String ACTION_SetStaticPlaylist = "SetStaticPlaylist";
    public static final String _SetStaticPlaylist_ARG_InstanceID = "InstanceID";
    public static final String _SetStaticPlaylist_ARG_PlaylistData = "PlaylistData";
    public static final String _SetStaticPlaylist_ARG_PlaylistDataLength = "PlaylistDataLength";
    public static final String _SetStaticPlaylist_ARG_PlaylistOffset = "PlaylistOffset";
    public static final String _SetStaticPlaylist_ARG_PlaylistTotalLength = "PlaylistTotalLength";
    public static final String _SetStaticPlaylist_ARG_PlaylistMIMEType = "PlaylistMIMEType";
    public static final String _SetStaticPlaylist_ARG_PlaylistExtendedType = "PlaylistExtendedType";
    public static final String _SetStaticPlaylist_ARG_PlaylistStartObj = "PlaylistStartObj";
    public static final String _SetStaticPlaylist_ARG_PlaylistStartGroup = "PlaylistStartGroup";
    public static final String ACTION_Play = "Play";
    public static final String _Play_ARG_InstanceID = "InstanceID";
    public static final String _Play_ARG_Speed = "Speed";
    public static final String ACTION_GetMediaInfo = "GetMediaInfo";
    public static final String _GetMediaInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetMediaInfo_ARG_NrTracks = "NrTracks";
    public static final String _GetMediaInfo_ARG_MediaDuration = "MediaDuration";
    public static final String _GetMediaInfo_ARG_CurrentURI = "CurrentURI";
    public static final String _GetMediaInfo_ARG_CurrentURIMetaData = "CurrentURIMetaData";
    public static final String _GetMediaInfo_ARG_NextURI = "NextURI";
    public static final String _GetMediaInfo_ARG_NextURIMetaData = "NextURIMetaData";
    public static final String _GetMediaInfo_ARG_PlayMedium = "PlayMedium";
    public static final String _GetMediaInfo_ARG_RecordMedium = "RecordMedium";
    public static final String _GetMediaInfo_ARG_WriteStatus = "WriteStatus";
    public static final String ACTION_SetRecordQualityMode = "SetRecordQualityMode";
    public static final String _SetRecordQualityMode_ARG_InstanceID = "InstanceID";
    public static final String _SetRecordQualityMode_ARG_NewRecordQualityMode = "NewRecordQualityMode";
    public static final String ACTION_Next = "Next";
    public static final String _Next_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetStateVariables = "GetStateVariables";
    public static final String _GetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _GetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String _GetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String ACTION_GetSyncOffset = "GetSyncOffset";
    public static final String _GetSyncOffset_ARG_InstanceID = "InstanceID";
    public static final String _GetSyncOffset_ARG_CurrentSyncOffset = "CurrentSyncOffset";
    public static final String ACTION_Record = "Record";
    public static final String _Record_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetTransportInfo = "GetTransportInfo";
    public static final String _GetTransportInfo_ARG_InstanceID = "InstanceID";
    public static final String _GetTransportInfo_ARG_CurrentTransportState = "CurrentTransportState";
    public static final String _GetTransportInfo_ARG_CurrentTransportStatus = "CurrentTransportStatus";
    public static final String _GetTransportInfo_ARG_CurrentSpeed = "CurrentSpeed";
    public static final String ACTION_SyncPlay = "SyncPlay";
    public static final String _SyncPlay_ARG_InstanceID = "InstanceID";
    public static final String _SyncPlay_ARG_Speed = "Speed";
    public static final String _SyncPlay_ARG_ReferencePositionUnits = "ReferencePositionUnits";
    public static final String _SyncPlay_ARG_ReferencePosition = "ReferencePosition";
    public static final String _SyncPlay_ARG_ReferencePresentationTime = "ReferencePresentationTime";
    public static final String _SyncPlay_ARG_ReferenceClockId = "ReferenceClockId";
    public static final String ACTION_Previous = "Previous";
    public static final String _Previous_ARG_InstanceID = "InstanceID";
    public static final String ACTION_AdjustSyncOffset = "AdjustSyncOffset";
    public static final String _AdjustSyncOffset_ARG_InstanceID = "InstanceID";
    public static final String _AdjustSyncOffset_ARG_Adjustment = "Adjustment";
    public static final String ACTION_GetDeviceCapabilities = "GetDeviceCapabilities";
    public static final String _GetDeviceCapabilities_ARG_InstanceID = "InstanceID";
    public static final String _GetDeviceCapabilities_ARG_PlayMedia = "PlayMedia";
    public static final String _GetDeviceCapabilities_ARG_RecMedia = "RecMedia";
    public static final String _GetDeviceCapabilities_ARG_RecQualityModes = "RecQualityModes";
    public static final String ACTION_SetStateVariables = "SetStateVariables";
    public static final String _SetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _SetStateVariables_ARG_AVTransportUDN = "AVTransportUDN";
    public static final String _SetStateVariables_ARG_ServiceType = "ServiceType";
    public static final String _SetStateVariables_ARG_ServiceId = "ServiceId";
    public static final String _SetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String _SetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String ACTION_SetStreamingPlaylist = "SetStreamingPlaylist";
    public static final String _SetStreamingPlaylist_ARG_InstanceID = "InstanceID";
    public static final String _SetStreamingPlaylist_ARG_PlaylistData = "PlaylistData";
    public static final String _SetStreamingPlaylist_ARG_PlaylistDataLength = "PlaylistDataLength";
    public static final String _SetStreamingPlaylist_ARG_PlaylistMIMEType = "PlaylistMIMEType";
    public static final String _SetStreamingPlaylist_ARG_PlaylistExtendedType = "PlaylistExtendedType";
    public static final String _SetStreamingPlaylist_ARG_PlaylistStep = "PlaylistStep";
    public static final String ACTION_Pause = "Pause";
    public static final String _Pause_ARG_InstanceID = "InstanceID";
    public static final String ACTION_GetCurrentTransportActions = "GetCurrentTransportActions";
    public static final String _GetCurrentTransportActions_ARG_InstanceID = "InstanceID";
    public static final String _GetCurrentTransportActions_ARG_Actions = "Actions";
    public static final String ACTION_SetAVTransportURI = "SetAVTransportURI";
    public static final String _SetAVTransportURI_ARG_InstanceID = "InstanceID";
    public static final String _SetAVTransportURI_ARG_CurrentURI = "CurrentURI";
    public static final String _SetAVTransportURI_ARG_CurrentURIMetaData = "CurrentURIMetaData";

    //-------------------------------------------------------
    // Property Name (52)
    //-------------------------------------------------------
    public static final String PROPERTY_AbsoluteTimePosition = "AbsoluteTimePosition";
    public static final String PROPERTY_A_ARG_TYPE_SyncOffsetAdj = "A_ARG_TYPE_SyncOffsetAdj";
    public static final String PROPERTY_NextAVTransportURI = "NextAVTransportURI";
    public static final String PROPERTY_TransportPlaySpeed = "TransportPlaySpeed";
    public static final String PROPERTY_TransportState = "TransportState";
    public static final String PROPERTY_DRMState = "DRMState";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistExtendedType = "A_ARG_TYPE_PlaylistExtendedType";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistData = "A_ARG_TYPE_PlaylistData";
    public static final String PROPERTY_A_ARG_TYPE_ServiceID = "A_ARG_TYPE_ServiceID";
    public static final String PROPERTY_CurrentTrackURI = "CurrentTrackURI";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistInfo = "A_ARG_TYPE_PlaylistInfo";
    public static final String PROPERTY_A_ARG_TYPE_PresentationTime = "A_ARG_TYPE_PresentationTime";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistStep = "A_ARG_TYPE_PlaylistStep";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistStartGroupID = "A_ARG_TYPE_PlaylistStartGroupID";
    public static final String PROPERTY_CurrentTransportActions = "CurrentTransportActions";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistMIMEType = "A_ARG_TYPE_PlaylistMIMEType";
    public static final String PROPERTY_PlaybackStorageMedium = "PlaybackStorageMedium";
    public static final String PROPERTY_RelativeTimePosition = "RelativeTimePosition";
    public static final String PROPERTY_A_ARG_TYPE_ServiceType = "A_ARG_TYPE_ServiceType";
    public static final String PROPERTY_CurrentMediaDuration = "CurrentMediaDuration";
    public static final String PROPERTY_CurrentTrackMetaData = "CurrentTrackMetaData";
    public static final String PROPERTY_RelativeCounterPosition = "RelativeCounterPosition";
    public static final String PROPERTY_A_ARG_TYPE_SeekMode = "A_ARG_TYPE_SeekMode";
    public static final String PROPERTY_LastChange = "LastChange";
    public static final String PROPERTY_PossibleRecordStorageMedia = "PossibleRecordStorageMedia";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistType = "A_ARG_TYPE_PlaylistType";
    public static final String PROPERTY_A_ARG_TYPE_DeviceUDN = "A_ARG_TYPE_DeviceUDN";
    public static final String PROPERTY_CurrentTrackDuration = "CurrentTrackDuration";
    public static final String PROPERTY_PossiblePlaybackStorageMedia = "PossiblePlaybackStorageMedia";
    public static final String PROPERTY_A_ARG_TYPE_SeekTarget = "A_ARG_TYPE_SeekTarget";
    public static final String PROPERTY_AVTransportURIMetaData = "AVTransportURIMetaData";
    public static final String PROPERTY_CurrentMediaCategory = "CurrentMediaCategory";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_CurrentPlayMode = "CurrentPlayMode";
    public static final String PROPERTY_NumberOfTracks = "NumberOfTracks";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistTotalLength = "A_ARG_TYPE_PlaylistTotalLength";
    public static final String PROPERTY_RecordStorageMedium = "RecordStorageMedium";
    public static final String PROPERTY_TransportStatus = "TransportStatus";
    public static final String PROPERTY_AVTransportURI = "AVTransportURI";
    public static final String PROPERTY_SyncOffset = "SyncOffset";
    public static final String PROPERTY_RecordMediumWriteStatus = "RecordMediumWriteStatus";
    public static final String PROPERTY_A_ARG_TYPE_ClockId = "A_ARG_TYPE_ClockId";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistStartObjID = "A_ARG_TYPE_PlaylistStartObjID";
    public static final String PROPERTY_CurrentTrack = "CurrentTrack";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableValuePairs = "A_ARG_TYPE_StateVariableValuePairs";
    public static final String PROPERTY_AbsoluteCounterPosition = "AbsoluteCounterPosition";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableList = "A_ARG_TYPE_StateVariableList";
    public static final String PROPERTY_NextAVTransportURIMetaData = "NextAVTransportURIMetaData";
    public static final String PROPERTY_PossibleRecordQualityModes = "PossibleRecordQualityModes";
    public static final String PROPERTY_CurrentRecordQualityMode = "CurrentRecordQualityMode";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistOffset = "A_ARG_TYPE_PlaylistOffset";
    public static final String PROPERTY_A_ARG_TYPE_PlaylistDataLength = "A_ARG_TYPE_PlaylistDataLength";

    //-------------------------------------------------------
    // Property value defined (9)
    //-------------------------------------------------------

    public enum TransportPlaySpeed {
        UNDEFINED,
        V_1;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_1 = "1";

        public static TransportPlaySpeed retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_1)) {
                return V_1;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_1:
                    value = CONST_V_1;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportState {
        UNDEFINED,
        V_STOPPED,
        V_PLAYING;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_STOPPED = "STOPPED";
        private static final String CONST_V_PLAYING = "PLAYING";

        public static TransportState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_STOPPED)) {
                return V_STOPPED;
            }

            if (value.equals(CONST_V_PLAYING)) {
                return V_PLAYING;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_STOPPED:
                    value = CONST_V_STOPPED;
                    break;

                case V_PLAYING:
                    value = CONST_V_PLAYING;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum DRMState {
        UNDEFINED,
        V_OK;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";

        public static DRMState retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_PlaylistStep {
        UNDEFINED,
        V_Initial,
        V_Continue,
        V_Stop,
        V_Reset;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Initial = "Initial";
        private static final String CONST_V_Continue = "Continue";
        private static final String CONST_V_Stop = "Stop";
        private static final String CONST_V_Reset = "Reset";

        public static A_ARG_TYPE_PlaylistStep retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Initial)) {
                return V_Initial;
            }

            if (value.equals(CONST_V_Continue)) {
                return V_Continue;
            }

            if (value.equals(CONST_V_Stop)) {
                return V_Stop;
            }

            if (value.equals(CONST_V_Reset)) {
                return V_Reset;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Initial:
                    value = CONST_V_Initial;
                    break;

                case V_Continue:
                    value = CONST_V_Continue;
                    break;

                case V_Stop:
                    value = CONST_V_Stop;
                    break;

                case V_Reset:
                    value = CONST_V_Reset;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_SeekMode {
        UNDEFINED,
        V_TRACK_NR;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_TRACK_NR = "TRACK_NR";

        public static A_ARG_TYPE_SeekMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_TRACK_NR)) {
                return V_TRACK_NR;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_TRACK_NR:
                    value = CONST_V_TRACK_NR;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_PlaylistType {
        UNDEFINED,
        V_Static,
        V_Streaming;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Static = "Static";
        private static final String CONST_V_Streaming = "Streaming";

        public static A_ARG_TYPE_PlaylistType retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Static)) {
                return V_Static;
            }

            if (value.equals(CONST_V_Streaming)) {
                return V_Streaming;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Static:
                    value = CONST_V_Static;
                    break;

                case V_Streaming:
                    value = CONST_V_Streaming;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentMediaCategory {
        UNDEFINED,
        V_NO_MEDIA,
        V_TRACK_AWARE,
        V_TRACK_UNAWARE,
        V_STEAM_PROJECTION;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NO_MEDIA = "NO_MEDIA";
        private static final String CONST_V_TRACK_AWARE = "TRACK_AWARE";
        private static final String CONST_V_TRACK_UNAWARE = "TRACK_UNAWARE";
        private static final String CONST_V_STEAM_PROJECTION = "STEAM_PROJECTION";

        public static CurrentMediaCategory retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NO_MEDIA)) {
                return V_NO_MEDIA;
            }

            if (value.equals(CONST_V_TRACK_AWARE)) {
                return V_TRACK_AWARE;
            }

            if (value.equals(CONST_V_TRACK_UNAWARE)) {
                return V_TRACK_UNAWARE;
            }

            if (value.equals(CONST_V_STEAM_PROJECTION)) {
                return V_STEAM_PROJECTION;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NO_MEDIA:
                    value = CONST_V_NO_MEDIA;
                    break;

                case V_TRACK_AWARE:
                    value = CONST_V_TRACK_AWARE;
                    break;

                case V_TRACK_UNAWARE:
                    value = CONST_V_TRACK_UNAWARE;
                    break;

                case V_STEAM_PROJECTION:
                    value = CONST_V_STEAM_PROJECTION;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum CurrentPlayMode {
        UNDEFINED,
        V_NORMAL;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_NORMAL = "NORMAL";

        public static CurrentPlayMode retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_NORMAL)) {
                return V_NORMAL;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_NORMAL:
                    value = CONST_V_NORMAL;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum TransportStatus {
        UNDEFINED,
        V_OK,
        V_ERROR_OCCURRED;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_OK = "OK";
        private static final String CONST_V_ERROR_OCCURRED = "ERROR_OCCURRED";

        public static TransportStatus retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_OK)) {
                return V_OK;
            }

            if (value.equals(CONST_V_ERROR_OCCURRED)) {
                return V_ERROR_OCCURRED;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_OK:
                    value = CONST_V_OK;
                    break;

                case V_ERROR_OCCURRED:
                    value = CONST_V_ERROR_OCCURRED;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // ActionList (30)
    //-------------------------------------------------------

    public interface GetDRMState_CompletedHandler {
        void onSucceed(DRMState theCurrentDRMState);
        void onFailed(int errCode, String description);
    }

    public int GetDRMState(Long InstanceID, final GetDRMState_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetDRMState);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetDRMState_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentDRMState = invocation.getResult(_GetDRMState_ARG_CurrentDRMState);
                        if (pCurrentDRMState == null) {
                            Log.d(TAG, String.format("%s not found", _GetDRMState_ARG_CurrentDRMState));
                            break;
                        }

                        DRMState theCurrentDRMState = DRMState.retrieveType(pCurrentDRMState.getCurrentValue().toString());

                        handler.onSucceed(theCurrentDRMState);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SyncStop_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SyncStop(Long InstanceID, String StopTime, String ReferenceClockId, final SyncStop_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SyncStop);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SyncStop_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncStop_ARG_StopTime, StopTime, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncStop_ARG_ReferenceClockId, ReferenceClockId, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetMediaInfo_Ext_CompletedHandler {
        void onSucceed(CurrentMediaCategory theCurrentType,
                       Long theNrTracks,
                       String theMediaDuration,
                       String theCurrentURI,
                       String theCurrentURIMetaData,
                       String theNextURI,
                       String theNextURIMetaData,
                       String thePlayMedium,
                       String theRecordMedium,
                       String theWriteStatus);
        void onFailed(int errCode, String description);
    }

    public int GetMediaInfo_Ext(Long InstanceID, final GetMediaInfo_Ext_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetMediaInfo_Ext);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetMediaInfo_Ext_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentType = invocation.getResult(_GetMediaInfo_Ext_ARG_CurrentType);
                        if (pCurrentType == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_CurrentType));
                            break;
                        }

                        Property pNrTracks = invocation.getResult(_GetMediaInfo_Ext_ARG_NrTracks);
                        if (pNrTracks == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_NrTracks));
                            break;
                        }

                        Property pMediaDuration = invocation.getResult(_GetMediaInfo_Ext_ARG_MediaDuration);
                        if (pMediaDuration == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_MediaDuration));
                            break;
                        }

                        Property pCurrentURI = invocation.getResult(_GetMediaInfo_Ext_ARG_CurrentURI);
                        if (pCurrentURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_CurrentURI));
                            break;
                        }

                        Property pCurrentURIMetaData = invocation.getResult(_GetMediaInfo_Ext_ARG_CurrentURIMetaData);
                        if (pCurrentURIMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_CurrentURIMetaData));
                            break;
                        }

                        Property pNextURI = invocation.getResult(_GetMediaInfo_Ext_ARG_NextURI);
                        if (pNextURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_NextURI));
                            break;
                        }

                        Property pNextURIMetaData = invocation.getResult(_GetMediaInfo_Ext_ARG_NextURIMetaData);
                        if (pNextURIMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_NextURIMetaData));
                            break;
                        }

                        Property pPlayMedium = invocation.getResult(_GetMediaInfo_Ext_ARG_PlayMedium);
                        if (pPlayMedium == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_PlayMedium));
                            break;
                        }

                        Property pRecordMedium = invocation.getResult(_GetMediaInfo_Ext_ARG_RecordMedium);
                        if (pRecordMedium == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_RecordMedium));
                            break;
                        }

                        Property pWriteStatus = invocation.getResult(_GetMediaInfo_Ext_ARG_WriteStatus);
                        if (pWriteStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_Ext_ARG_WriteStatus));
                            break;
                        }

                        CurrentMediaCategory theCurrentType = CurrentMediaCategory.retrieveType(pCurrentType.getCurrentValue().toString());
                        Long theNrTracks = (Long) pNrTracks.getCurrentValue();
                        String theMediaDuration = (String) pMediaDuration.getCurrentValue();
                        String theCurrentURI = (String) pCurrentURI.getCurrentValue();
                        String theCurrentURIMetaData = (String) pCurrentURIMetaData.getCurrentValue();
                        String theNextURI = (String) pNextURI.getCurrentValue();
                        String theNextURIMetaData = (String) pNextURIMetaData.getCurrentValue();
                        String thePlayMedium = (String) pPlayMedium.getCurrentValue();
                        String theRecordMedium = (String) pRecordMedium.getCurrentValue();
                        String theWriteStatus = (String) pWriteStatus.getCurrentValue();

                        handler.onSucceed(theCurrentType,
                                theNrTracks,
                                theMediaDuration,
                                theCurrentURI,
                                theCurrentURIMetaData,
                                theNextURI,
                                theNextURIMetaData,
                                thePlayMedium,
                                theRecordMedium,
                                theWriteStatus);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Stop_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Stop(Long InstanceID, final Stop_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Stop);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Stop_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetTransportSettings_CompletedHandler {
        void onSucceed(CurrentPlayMode thePlayMode,
                       String theRecQualityMode);
        void onFailed(int errCode, String description);
    }

    public int GetTransportSettings(Long InstanceID, final GetTransportSettings_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetTransportSettings);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetTransportSettings_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pPlayMode = invocation.getResult(_GetTransportSettings_ARG_PlayMode);
                        if (pPlayMode == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportSettings_ARG_PlayMode));
                            break;
                        }

                        Property pRecQualityMode = invocation.getResult(_GetTransportSettings_ARG_RecQualityMode);
                        if (pRecQualityMode == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportSettings_ARG_RecQualityMode));
                            break;
                        }

                        CurrentPlayMode thePlayMode = CurrentPlayMode.retrieveType(pPlayMode.getCurrentValue().toString());
                        String theRecQualityMode = (String) pRecQualityMode.getCurrentValue();

                        handler.onSucceed(thePlayMode,
                                theRecQualityMode);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetSyncOffset_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetSyncOffset(Long InstanceID, String NewSyncOffset, final SetSyncOffset_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetSyncOffset);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetSyncOffset_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetSyncOffset_ARG_NewSyncOffset, NewSyncOffset, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SyncPause_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SyncPause(Long InstanceID, String PauseTime, String ReferenceClockId, final SyncPause_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SyncPause);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SyncPause_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPause_ARG_PauseTime, PauseTime, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPause_ARG_ReferenceClockId, ReferenceClockId, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetPositionInfo_CompletedHandler {
        void onSucceed(Long theTrack,
                       String theTrackDuration,
                       String theTrackMetaData,
                       String theTrackURI,
                       String theRelTime,
                       String theAbsTime,
                       Integer theRelCount,
                       Long theAbsCount);
        void onFailed(int errCode, String description);
    }

    public int GetPositionInfo(Long InstanceID, final GetPositionInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetPositionInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetPositionInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pTrack = invocation.getResult(_GetPositionInfo_ARG_Track);
                        if (pTrack == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_Track));
                            break;
                        }

                        Property pTrackDuration = invocation.getResult(_GetPositionInfo_ARG_TrackDuration);
                        if (pTrackDuration == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_TrackDuration));
                            break;
                        }

                        Property pTrackMetaData = invocation.getResult(_GetPositionInfo_ARG_TrackMetaData);
                        if (pTrackMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_TrackMetaData));
                            break;
                        }

                        Property pTrackURI = invocation.getResult(_GetPositionInfo_ARG_TrackURI);
                        if (pTrackURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_TrackURI));
                            break;
                        }

                        Property pRelTime = invocation.getResult(_GetPositionInfo_ARG_RelTime);
                        if (pRelTime == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_RelTime));
                            break;
                        }

                        Property pAbsTime = invocation.getResult(_GetPositionInfo_ARG_AbsTime);
                        if (pAbsTime == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_AbsTime));
                            break;
                        }

                        Property pRelCount = invocation.getResult(_GetPositionInfo_ARG_RelCount);
                        if (pRelCount == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_RelCount));
                            break;
                        }

                        Property pAbsCount = invocation.getResult(_GetPositionInfo_ARG_AbsCount);
                        if (pAbsCount == null) {
                            Log.d(TAG, String.format("%s not found", _GetPositionInfo_ARG_AbsCount));
                            break;
                        }

                        Long theTrack = (Long) pTrack.getCurrentValue();
                        String theTrackDuration = (String) pTrackDuration.getCurrentValue();
                        String theTrackMetaData = (String) pTrackMetaData.getCurrentValue();
                        String theTrackURI = (String) pTrackURI.getCurrentValue();
                        String theRelTime = (String) pRelTime.getCurrentValue();
                        String theAbsTime = (String) pAbsTime.getCurrentValue();
                        Integer theRelCount = (Integer) pRelCount.getCurrentValue();
                        Long theAbsCount = (Long) pAbsCount.getCurrentValue();

                        handler.onSucceed(theTrack,
                                theTrackDuration,
                                theTrackMetaData,
                                theTrackURI,
                                theRelTime,
                                theAbsTime,
                                theRelCount,
                                theAbsCount);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetPlaylistInfo_CompletedHandler {
        void onSucceed(String thePlaylistInfo);
        void onFailed(int errCode, String description);
    }

    public int GetPlaylistInfo(Long InstanceID, A_ARG_TYPE_PlaylistType PlaylistType, final GetPlaylistInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetPlaylistInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetPlaylistInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetPlaylistInfo_ARG_PlaylistType, PlaylistType.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pPlaylistInfo = invocation.getResult(_GetPlaylistInfo_ARG_PlaylistInfo);
                        if (pPlaylistInfo == null) {
                            Log.d(TAG, String.format("%s not found", _GetPlaylistInfo_ARG_PlaylistInfo));
                            break;
                        }

                        String thePlaylistInfo = (String) pPlaylistInfo.getCurrentValue();

                        handler.onSucceed(thePlaylistInfo);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetNextAVTransportURI_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetNextAVTransportURI(Long InstanceID, String NextURI, String NextURIMetaData, final SetNextAVTransportURI_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetNextAVTransportURI);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetNextAVTransportURI_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetNextAVTransportURI_ARG_NextURI, NextURI, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetNextAVTransportURI_ARG_NextURIMetaData, NextURIMetaData, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetPlayMode_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetPlayMode(Long InstanceID, CurrentPlayMode NewPlayMode, final SetPlayMode_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetPlayMode);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetPlayMode_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetPlayMode_ARG_NewPlayMode, NewPlayMode.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Seek_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Seek(Long InstanceID, A_ARG_TYPE_SeekMode Unit, String Target, final Seek_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Seek);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Seek_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Seek_ARG_Unit, Unit.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Seek_ARG_Target, Target, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetStaticPlaylist_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetStaticPlaylist(Long InstanceID, String PlaylistData, Long PlaylistDataLength, Long PlaylistOffset, Long PlaylistTotalLength, String PlaylistMIMEType, String PlaylistExtendedType, String PlaylistStartObj, String PlaylistStartGroup, final SetStaticPlaylist_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetStaticPlaylist);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistData, PlaylistData, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistDataLength, PlaylistDataLength, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistOffset, PlaylistOffset, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistTotalLength, PlaylistTotalLength, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistMIMEType, PlaylistMIMEType, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistExtendedType, PlaylistExtendedType, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistStartObj, PlaylistStartObj, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStaticPlaylist_ARG_PlaylistStartGroup, PlaylistStartGroup, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Play_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Play(Long InstanceID, TransportPlaySpeed Speed, final Play_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Play);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Play_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_Play_ARG_Speed, Speed.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetMediaInfo_CompletedHandler {
        void onSucceed(Long theNrTracks,
                       String theMediaDuration,
                       String theCurrentURI,
                       String theCurrentURIMetaData,
                       String theNextURI,
                       String theNextURIMetaData,
                       String thePlayMedium,
                       String theRecordMedium,
                       String theWriteStatus);
        void onFailed(int errCode, String description);
    }

    public int GetMediaInfo(Long InstanceID, final GetMediaInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetMediaInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetMediaInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pNrTracks = invocation.getResult(_GetMediaInfo_ARG_NrTracks);
                        if (pNrTracks == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_NrTracks));
                            break;
                        }

                        Property pMediaDuration = invocation.getResult(_GetMediaInfo_ARG_MediaDuration);
                        if (pMediaDuration == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_MediaDuration));
                            break;
                        }

                        Property pCurrentURI = invocation.getResult(_GetMediaInfo_ARG_CurrentURI);
                        if (pCurrentURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_CurrentURI));
                            break;
                        }

                        Property pCurrentURIMetaData = invocation.getResult(_GetMediaInfo_ARG_CurrentURIMetaData);
                        if (pCurrentURIMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_CurrentURIMetaData));
                            break;
                        }

                        Property pNextURI = invocation.getResult(_GetMediaInfo_ARG_NextURI);
                        if (pNextURI == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_NextURI));
                            break;
                        }

                        Property pNextURIMetaData = invocation.getResult(_GetMediaInfo_ARG_NextURIMetaData);
                        if (pNextURIMetaData == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_NextURIMetaData));
                            break;
                        }

                        Property pPlayMedium = invocation.getResult(_GetMediaInfo_ARG_PlayMedium);
                        if (pPlayMedium == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_PlayMedium));
                            break;
                        }

                        Property pRecordMedium = invocation.getResult(_GetMediaInfo_ARG_RecordMedium);
                        if (pRecordMedium == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_RecordMedium));
                            break;
                        }

                        Property pWriteStatus = invocation.getResult(_GetMediaInfo_ARG_WriteStatus);
                        if (pWriteStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetMediaInfo_ARG_WriteStatus));
                            break;
                        }

                        Long theNrTracks = (Long) pNrTracks.getCurrentValue();
                        String theMediaDuration = (String) pMediaDuration.getCurrentValue();
                        String theCurrentURI = (String) pCurrentURI.getCurrentValue();
                        String theCurrentURIMetaData = (String) pCurrentURIMetaData.getCurrentValue();
                        String theNextURI = (String) pNextURI.getCurrentValue();
                        String theNextURIMetaData = (String) pNextURIMetaData.getCurrentValue();
                        String thePlayMedium = (String) pPlayMedium.getCurrentValue();
                        String theRecordMedium = (String) pRecordMedium.getCurrentValue();
                        String theWriteStatus = (String) pWriteStatus.getCurrentValue();

                        handler.onSucceed(theNrTracks,
                                theMediaDuration,
                                theCurrentURI,
                                theCurrentURIMetaData,
                                theNextURI,
                                theNextURIMetaData,
                                thePlayMedium,
                                theRecordMedium,
                                theWriteStatus);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetRecordQualityMode_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetRecordQualityMode(Long InstanceID, String NewRecordQualityMode, final SetRecordQualityMode_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetRecordQualityMode);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetRecordQualityMode_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetRecordQualityMode_ARG_NewRecordQualityMode, NewRecordQualityMode, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Next_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Next(Long InstanceID, final Next_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Next);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Next_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetStateVariables_CompletedHandler {
        void onSucceed(String theStateVariableValuePairs);
        void onFailed(int errCode, String description);
    }

    public int GetStateVariables(Long InstanceID, String StateVariableList, final GetStateVariables_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetStateVariables);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetStateVariables_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_GetStateVariables_ARG_StateVariableList, StateVariableList, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pStateVariableValuePairs = invocation.getResult(_GetStateVariables_ARG_StateVariableValuePairs);
                        if (pStateVariableValuePairs == null) {
                            Log.d(TAG, String.format("%s not found", _GetStateVariables_ARG_StateVariableValuePairs));
                            break;
                        }

                        String theStateVariableValuePairs = (String) pStateVariableValuePairs.getCurrentValue();

                        handler.onSucceed(theStateVariableValuePairs);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetSyncOffset_CompletedHandler {
        void onSucceed(String theCurrentSyncOffset);
        void onFailed(int errCode, String description);
    }

    public int GetSyncOffset(Long InstanceID, final GetSyncOffset_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetSyncOffset);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetSyncOffset_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentSyncOffset = invocation.getResult(_GetSyncOffset_ARG_CurrentSyncOffset);
                        if (pCurrentSyncOffset == null) {
                            Log.d(TAG, String.format("%s not found", _GetSyncOffset_ARG_CurrentSyncOffset));
                            break;
                        }

                        String theCurrentSyncOffset = (String) pCurrentSyncOffset.getCurrentValue();

                        handler.onSucceed(theCurrentSyncOffset);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Record_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Record(Long InstanceID, final Record_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Record);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Record_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetTransportInfo_CompletedHandler {
        void onSucceed(TransportState theCurrentTransportState,
                       TransportStatus theCurrentTransportStatus,
                       TransportPlaySpeed theCurrentSpeed);
        void onFailed(int errCode, String description);
    }

    public int GetTransportInfo(Long InstanceID, final GetTransportInfo_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetTransportInfo);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetTransportInfo_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pCurrentTransportState = invocation.getResult(_GetTransportInfo_ARG_CurrentTransportState);
                        if (pCurrentTransportState == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportInfo_ARG_CurrentTransportState));
                            break;
                        }

                        Property pCurrentTransportStatus = invocation.getResult(_GetTransportInfo_ARG_CurrentTransportStatus);
                        if (pCurrentTransportStatus == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportInfo_ARG_CurrentTransportStatus));
                            break;
                        }

                        Property pCurrentSpeed = invocation.getResult(_GetTransportInfo_ARG_CurrentSpeed);
                        if (pCurrentSpeed == null) {
                            Log.d(TAG, String.format("%s not found", _GetTransportInfo_ARG_CurrentSpeed));
                            break;
                        }

                        TransportState theCurrentTransportState = TransportState.retrieveType(pCurrentTransportState.getCurrentValue().toString());
                        TransportStatus theCurrentTransportStatus = TransportStatus.retrieveType(pCurrentTransportStatus.getCurrentValue().toString());
                        TransportPlaySpeed theCurrentSpeed = TransportPlaySpeed.retrieveType(pCurrentSpeed.getCurrentValue().toString());

                        handler.onSucceed(theCurrentTransportState,
                                theCurrentTransportStatus,
                                theCurrentSpeed);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SyncPlay_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SyncPlay(Long InstanceID, TransportPlaySpeed Speed, A_ARG_TYPE_SeekMode ReferencePositionUnits, String ReferencePosition, String ReferencePresentationTime, String ReferenceClockId, final SyncPlay_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SyncPlay);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SyncPlay_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPlay_ARG_Speed, Speed.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPlay_ARG_ReferencePositionUnits, ReferencePositionUnits.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPlay_ARG_ReferencePosition, ReferencePosition, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPlay_ARG_ReferencePresentationTime, ReferencePresentationTime, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SyncPlay_ARG_ReferenceClockId, ReferenceClockId, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Previous_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Previous(Long InstanceID, final Previous_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Previous);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Previous_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface AdjustSyncOffset_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int AdjustSyncOffset(Long InstanceID, String Adjustment, final AdjustSyncOffset_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_AdjustSyncOffset);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_AdjustSyncOffset_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_AdjustSyncOffset_ARG_Adjustment, Adjustment, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetDeviceCapabilities_CompletedHandler {
        void onSucceed(String thePlayMedia,
                       String theRecMedia,
                       String theRecQualityModes);
        void onFailed(int errCode, String description);
    }

    public int GetDeviceCapabilities(Long InstanceID, final GetDeviceCapabilities_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetDeviceCapabilities);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetDeviceCapabilities_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pPlayMedia = invocation.getResult(_GetDeviceCapabilities_ARG_PlayMedia);
                        if (pPlayMedia == null) {
                            Log.d(TAG, String.format("%s not found", _GetDeviceCapabilities_ARG_PlayMedia));
                            break;
                        }

                        Property pRecMedia = invocation.getResult(_GetDeviceCapabilities_ARG_RecMedia);
                        if (pRecMedia == null) {
                            Log.d(TAG, String.format("%s not found", _GetDeviceCapabilities_ARG_RecMedia));
                            break;
                        }

                        Property pRecQualityModes = invocation.getResult(_GetDeviceCapabilities_ARG_RecQualityModes);
                        if (pRecQualityModes == null) {
                            Log.d(TAG, String.format("%s not found", _GetDeviceCapabilities_ARG_RecQualityModes));
                            break;
                        }

                        String thePlayMedia = (String) pPlayMedia.getCurrentValue();
                        String theRecMedia = (String) pRecMedia.getCurrentValue();
                        String theRecQualityModes = (String) pRecQualityModes.getCurrentValue();

                        handler.onSucceed(thePlayMedia,
                                theRecMedia,
                                theRecQualityModes);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetStateVariables_CompletedHandler {
        void onSucceed(String theStateVariableList);
        void onFailed(int errCode, String description);
    }

    public int SetStateVariables(Long InstanceID, String AVTransportUDN, String ServiceType, String ServiceId, String StateVariableValuePairs, final SetStateVariables_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetStateVariables);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetStateVariables_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_AVTransportUDN, AVTransportUDN, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_ServiceType, ServiceType, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_ServiceId, ServiceId, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStateVariables_ARG_StateVariableValuePairs, StateVariableValuePairs, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pStateVariableList = invocation.getResult(_SetStateVariables_ARG_StateVariableList);
                        if (pStateVariableList == null) {
                            Log.d(TAG, String.format("%s not found", _SetStateVariables_ARG_StateVariableList));
                            break;
                        }

                        String theStateVariableList = (String) pStateVariableList.getCurrentValue();

                        handler.onSucceed(theStateVariableList);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetStreamingPlaylist_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetStreamingPlaylist(Long InstanceID, String PlaylistData, Long PlaylistDataLength, String PlaylistMIMEType, String PlaylistExtendedType, A_ARG_TYPE_PlaylistStep PlaylistStep, final SetStreamingPlaylist_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetStreamingPlaylist);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetStreamingPlaylist_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStreamingPlaylist_ARG_PlaylistData, PlaylistData, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStreamingPlaylist_ARG_PlaylistDataLength, PlaylistDataLength, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStreamingPlaylist_ARG_PlaylistMIMEType, PlaylistMIMEType, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStreamingPlaylist_ARG_PlaylistExtendedType, PlaylistExtendedType, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetStreamingPlaylist_ARG_PlaylistStep, PlaylistStep.getValue(), Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface Pause_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int Pause(Long InstanceID, final Pause_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_Pause);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_Pause_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface GetCurrentTransportActions_CompletedHandler {
        void onSucceed(String theActions);
        void onFailed(int errCode, String description);
    }

    public int GetCurrentTransportActions(Long InstanceID, final GetCurrentTransportActions_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_GetCurrentTransportActions);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_GetCurrentTransportActions_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    do {
                        Property pActions = invocation.getResult(_GetCurrentTransportActions_ARG_Actions);
                        if (pActions == null) {
                            Log.d(TAG, String.format("%s not found", _GetCurrentTransportActions_ARG_Actions));
                            break;
                        }

                        String theActions = (String) pActions.getCurrentValue();

                        handler.onSucceed(theActions);
                    } while (false);
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    public interface SetAVTransportURI_CompletedHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public int SetAVTransportURI(Long InstanceID, String CurrentURI, String CurrentURIMetaData, final SetAVTransportURI_CompletedHandler handler) {
        int ret = 0;

        do {
            ActionInfo action = ActionInfoCreator.create(service, ACTION_SetAVTransportURI);
            if (action == null) {
                ret = ReturnCode.E_ACTION_NOT_SUPPORT;
                break;
            }

            if (!action.setArgumentValue(_SetAVTransportURI_ARG_InstanceID, InstanceID, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetAVTransportURI_ARG_CurrentURI, CurrentURI, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }
            if (!action.setArgumentValue(_SetAVTransportURI_ARG_CurrentURIMetaData, CurrentURIMetaData, Argument.Direction.IN)) {
                ret = ReturnCode.E_ARGUMENT_INVALID;
                break;
            }

            ret = UpnpManager.getUpnp().invoke(action, new MyInvokeCompletionHandler() {

                @Override
                public void onSucceed(ActionInfo invocation) {
                    handler.onSucceed();
                }

                @Override
                public void onFailed(final int errCode, final String description) {
                    handler.onFailed(errCode, description);
                }
            });

        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Event
    //-------------------------------------------------------

    public interface CompletionHandler {
        void onSucceed();
        void onFailed(int errCode, String description);
    }

    public interface EventListener {
        void onSubscriptionExpired();
        void onTransportStateChanged(TransportState currentValue);
        void onLastChangeChanged(String currentValue);
    }

    public int subscribe(final CompletionHandler handler, final EventListener listener) {
        int ret = ReturnCode.OK;

        do {
            if (this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            if (listener == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }


            ret = UpnpManager.getUpnp().subscribe(this.service,
                    new MyCompletionHandler() {

                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    },
                    new MyEventListener() {
                        @Override
                        public void onSubscriptionExpired(String serviceId) {
                            listener.onSubscriptionExpired();
                        }

                        @Override
                        public void onEvent(String serviceId, List<PropertyChanged> list) {
                            for (PropertyChanged c : list) {
                                if (c.getName().equals(PROPERTY_TransportState)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_TransportState);
                                    listener.onTransportStateChanged(TransportState.retrieveType((String)def.getDataType().toObjectValue(c.getValue())));
                                }
                                if (c.getName().equals(PROPERTY_LastChange)) {
                                    PropertyDefinition def = service.getPropertyDefinition(PROPERTY_LastChange);
                                    listener.onLastChangeChanged((String)def.getDataType().toObjectValue(c.getValue()));
                                }
                            }
                        }
                    });
        } while (false);

        return ret;
    }

    public int unsubscribe(final CompletionHandler handler) {
        int ret = ReturnCode.OK;

        do {
            if (! this.service.isSubscribed()) {
                ret = ReturnCode.E_EVENT_SUBSCRIBED;
                break;
            }

            if (handler == null) {
                ret = ReturnCode.E_INVALID_PARAM;
                break;
            }

            ret = UpnpManager.getUpnp().unsubscribe(this.service,
                    new MyCompletionHandler() {
                        @Override
                        public void onSucceed() {
                            handler.onSucceed();
                        }

                        @Override
                        public void onFailed(int errCode, String description) {
                            handler.onFailed(errCode, description);
                        }
                    });
        } while (false);

        return ret;
    }

}
