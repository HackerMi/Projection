/* Automatic generated by DeviceToClazz */

package xiaomi.com.projection.device.host;

import android.util.Log;

import upnp.typedef.UpnpError;
import upnp.typedef.device.Argument;
import upnp.typedef.device.Service;
import upnp.typedef.device.invocation.ActionInfo;
import upnp.typedef.device.invocation.EventInfo;
import upnp.typedef.device.invocation.EventInfoCreator;
import upnp.typedef.exception.UpnpException;

import upnps.api.manager.UpnpManager;
import upnps.api.manager.host.ServiceStub;

public class MediaRenderingControl implements ServiceStub {
    private static final String TAG = "MediaRenderingControl";

    //-------------------------------------------------------
    // Action Names (44)
    //-------------------------------------------------------
    public static final String ACTION_GetAllowedDefaultTransforms = "GetAllowedDefaultTransforms";
    public static final String _GetAllowedDefaultTransforms_ARG_AllowedDefaultTransformSettings = "AllowedDefaultTransformSettings";
    public static final String ACTION_GetAllAvailableTransforms = "GetAllAvailableTransforms";
    public static final String _GetAllAvailableTransforms_ARG_AllAllowedTransformSettings = "AllAllowedTransformSettings";
    public static final String ACTION_GetColorTemperature = "GetColorTemperature";
    public static final String _GetColorTemperature_ARG_InstanceID = "InstanceID";
    public static final String _GetColorTemperature_ARG_CurrentColorTemperature = "CurrentColorTemperature";
    public static final String ACTION_SetLoudness = "SetLoudness";
    public static final String _SetLoudness_ARG_InstanceID = "InstanceID";
    public static final String _SetLoudness_ARG_Channel = "Channel";
    public static final String _SetLoudness_ARG_DesiredLoudness = "DesiredLoudness";
    public static final String ACTION_GetVolumeDB = "GetVolumeDB";
    public static final String _GetVolumeDB_ARG_InstanceID = "InstanceID";
    public static final String _GetVolumeDB_ARG_Channel = "Channel";
    public static final String _GetVolumeDB_ARG_CurrentVolume = "CurrentVolume";
    public static final String ACTION_GetContrast = "GetContrast";
    public static final String _GetContrast_ARG_InstanceID = "InstanceID";
    public static final String _GetContrast_ARG_CurrentContrast = "CurrentContrast";
    public static final String ACTION_GetGreenVideoGain = "GetGreenVideoGain";
    public static final String _GetGreenVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _GetGreenVideoGain_ARG_CurrentGreenVideoGain = "CurrentGreenVideoGain";
    public static final String ACTION_GetMute = "GetMute";
    public static final String _GetMute_ARG_InstanceID = "InstanceID";
    public static final String _GetMute_ARG_Channel = "Channel";
    public static final String _GetMute_ARG_CurrentMute = "CurrentMute";
    public static final String ACTION_SetColorTemperature = "SetColorTemperature";
    public static final String _SetColorTemperature_ARG_InstanceID = "InstanceID";
    public static final String _SetColorTemperature_ARG_DesiredColorTemperature = "DesiredColorTemperature";
    public static final String ACTION_SetContrast = "SetContrast";
    public static final String _SetContrast_ARG_InstanceID = "InstanceID";
    public static final String _SetContrast_ARG_DesiredContrast = "DesiredContrast";
    public static final String ACTION_SetBlueVideoBlackLevel = "SetBlueVideoBlackLevel";
    public static final String _SetBlueVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _SetBlueVideoBlackLevel_ARG_DesiredBlueVideoBlackLevel = "DesiredBlueVideoBlackLevel";
    public static final String ACTION_SetSharpness = "SetSharpness";
    public static final String _SetSharpness_ARG_InstanceID = "InstanceID";
    public static final String _SetSharpness_ARG_DesiredSharpness = "DesiredSharpness";
    public static final String ACTION_ListPresets = "ListPresets";
    public static final String _ListPresets_ARG_InstanceID = "InstanceID";
    public static final String _ListPresets_ARG_CurrentPresetNameList = "CurrentPresetNameList";
    public static final String ACTION_SetHorizontalKeystone = "SetHorizontalKeystone";
    public static final String _SetHorizontalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _SetHorizontalKeystone_ARG_DesiredHorizontalKeystone = "DesiredHorizontalKeystone";
    public static final String ACTION_SetMute = "SetMute";
    public static final String _SetMute_ARG_InstanceID = "InstanceID";
    public static final String _SetMute_ARG_Channel = "Channel";
    public static final String _SetMute_ARG_DesiredMute = "DesiredMute";
    public static final String ACTION_SetBrightness = "SetBrightness";
    public static final String _SetBrightness_ARG_InstanceID = "InstanceID";
    public static final String _SetBrightness_ARG_DesiredBrightness = "DesiredBrightness";
    public static final String ACTION_GetDefaultTransforms = "GetDefaultTransforms";
    public static final String _GetDefaultTransforms_ARG_CurrentDefaultTransformSettings = "CurrentDefaultTransformSettings";
    public static final String ACTION_GetVerticalKeystone = "GetVerticalKeystone";
    public static final String _GetVerticalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _GetVerticalKeystone_ARG_CurrentVerticalKeystone = "CurrentVerticalKeystone";
    public static final String ACTION_GetVolumeDBRange = "GetVolumeDBRange";
    public static final String _GetVolumeDBRange_ARG_InstanceID = "InstanceID";
    public static final String _GetVolumeDBRange_ARG_Channel = "Channel";
    public static final String _GetVolumeDBRange_ARG_MinValue = "MinValue";
    public static final String _GetVolumeDBRange_ARG_MaxValue = "MaxValue";
    public static final String ACTION_GetBlueVideoBlackLevel = "GetBlueVideoBlackLevel";
    public static final String _GetBlueVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _GetBlueVideoBlackLevel_ARG_CurrentBlueVideoBlackLevel = "CurrentBlueVideoBlackLevel";
    public static final String ACTION_GetAllowedTransforms = "GetAllowedTransforms";
    public static final String _GetAllowedTransforms_ARG_InstanceID = "InstanceID";
    public static final String _GetAllowedTransforms_ARG_CurrentAllowedTransformSettings = "CurrentAllowedTransformSettings";
    public static final String ACTION_GetBlueVideoGain = "GetBlueVideoGain";
    public static final String _GetBlueVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _GetBlueVideoGain_ARG_CurrentBlueVideoGain = "CurrentBlueVideoGain";
    public static final String ACTION_SetVerticalKeystone = "SetVerticalKeystone";
    public static final String _SetVerticalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _SetVerticalKeystone_ARG_DesiredVerticalKeystone = "DesiredVerticalKeystone";
    public static final String ACTION_SetGreenVideoBlackLevel = "SetGreenVideoBlackLevel";
    public static final String _SetGreenVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _SetGreenVideoBlackLevel_ARG_DesiredGreenVideoBlackLevel = "DesiredGreenVideoBlackLevel";
    public static final String ACTION_SetVolumeDB = "SetVolumeDB";
    public static final String _SetVolumeDB_ARG_InstanceID = "InstanceID";
    public static final String _SetVolumeDB_ARG_Channel = "Channel";
    public static final String _SetVolumeDB_ARG_DesiredVolume = "DesiredVolume";
    public static final String ACTION_GetSharpness = "GetSharpness";
    public static final String _GetSharpness_ARG_InstanceID = "InstanceID";
    public static final String _GetSharpness_ARG_CurrentSharpness = "CurrentSharpness";
    public static final String ACTION_GetRedVideoBlackLevel = "GetRedVideoBlackLevel";
    public static final String _GetRedVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _GetRedVideoBlackLevel_ARG_CurrentRedVideoBlackLevel = "CurrentRedVideoBlackLevel";
    public static final String ACTION_SetRedVideoGain = "SetRedVideoGain";
    public static final String _SetRedVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _SetRedVideoGain_ARG_DesiredRedVideoGain = "DesiredRedVideoGain";
    public static final String ACTION_SetDefaultTransforms = "SetDefaultTransforms";
    public static final String _SetDefaultTransforms_ARG_DesiredDefaultTransformSettings = "DesiredDefaultTransformSettings";
    public static final String ACTION_GetStateVariables = "GetStateVariables";
    public static final String _GetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _GetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String _GetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String ACTION_GetLoudness = "GetLoudness";
    public static final String _GetLoudness_ARG_InstanceID = "InstanceID";
    public static final String _GetLoudness_ARG_Channel = "Channel";
    public static final String _GetLoudness_ARG_CurrentLoudness = "CurrentLoudness";
    public static final String ACTION_SetRedVideoBlackLevel = "SetRedVideoBlackLevel";
    public static final String _SetRedVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _SetRedVideoBlackLevel_ARG_DesiredRedVideoBlackLevel = "DesiredRedVideoBlackLevel";
    public static final String ACTION_SetVolume = "SetVolume";
    public static final String _SetVolume_ARG_InstanceID = "InstanceID";
    public static final String _SetVolume_ARG_Channel = "Channel";
    public static final String _SetVolume_ARG_DesiredVolume = "DesiredVolume";
    public static final String ACTION_SetBlueVideoGain = "SetBlueVideoGain";
    public static final String _SetBlueVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _SetBlueVideoGain_ARG_DesiredBlueVideoGain = "DesiredBlueVideoGain";
    public static final String ACTION_SetTransforms = "SetTransforms";
    public static final String _SetTransforms_ARG_InstanceID = "InstanceID";
    public static final String _SetTransforms_ARG_DesiredTransformValues = "DesiredTransformValues";
    public static final String ACTION_GetVolume = "GetVolume";
    public static final String _GetVolume_ARG_InstanceID = "InstanceID";
    public static final String _GetVolume_ARG_Channel = "Channel";
    public static final String _GetVolume_ARG_CurrentVolume = "CurrentVolume";
    public static final String ACTION_SetStateVariables = "SetStateVariables";
    public static final String _SetStateVariables_ARG_InstanceID = "InstanceID";
    public static final String _SetStateVariables_ARG_RenderingControlUDN = "RenderingControlUDN";
    public static final String _SetStateVariables_ARG_ServiceType = "ServiceType";
    public static final String _SetStateVariables_ARG_ServiceId = "ServiceId";
    public static final String _SetStateVariables_ARG_StateVariableValuePairs = "StateVariableValuePairs";
    public static final String _SetStateVariables_ARG_StateVariableList = "StateVariableList";
    public static final String ACTION_GetRedVideoGain = "GetRedVideoGain";
    public static final String _GetRedVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _GetRedVideoGain_ARG_CurrentRedVideoGain = "CurrentRedVideoGain";
    public static final String ACTION_GetBrightness = "GetBrightness";
    public static final String _GetBrightness_ARG_InstanceID = "InstanceID";
    public static final String _GetBrightness_ARG_CurrentBrightness = "CurrentBrightness";
    public static final String ACTION_GetGreenVideoBlackLevel = "GetGreenVideoBlackLevel";
    public static final String _GetGreenVideoBlackLevel_ARG_InstanceID = "InstanceID";
    public static final String _GetGreenVideoBlackLevel_ARG_CurrentGreenVideoBlackLevel = "CurrentGreenVideoBlackLevel";
    public static final String ACTION_SetGreenVideoGain = "SetGreenVideoGain";
    public static final String _SetGreenVideoGain_ARG_InstanceID = "InstanceID";
    public static final String _SetGreenVideoGain_ARG_DesiredGreenVideoGain = "DesiredGreenVideoGain";
    public static final String ACTION_GetHorizontalKeystone = "GetHorizontalKeystone";
    public static final String _GetHorizontalKeystone_ARG_InstanceID = "InstanceID";
    public static final String _GetHorizontalKeystone_ARG_CurrentHorizontalKeystone = "CurrentHorizontalKeystone";
    public static final String ACTION_GetTransforms = "GetTransforms";
    public static final String _GetTransforms_ARG_InstanceID = "InstanceID";
    public static final String _GetTransforms_ARG_CurrentTransformValues = "CurrentTransformValues";
    public static final String ACTION_SelectPreset = "SelectPreset";
    public static final String _SelectPreset_ARG_InstanceID = "InstanceID";
    public static final String _SelectPreset_ARG_PresetName = "PresetName";

    //-------------------------------------------------------
    // Property Name (30)
    //-------------------------------------------------------
    public static final String PROPERTY_VerticalKeystone = "VerticalKeystone";
    public static final String PROPERTY_PresetNameList = "PresetNameList";
    public static final String PROPERTY_AllowedDefaultTransformSettings = "AllowedDefaultTransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_DeviceUDN = "A_ARG_TYPE_DeviceUDN";
    public static final String PROPERTY_A_ARG_TYPE_ServiceID = "A_ARG_TYPE_ServiceID";
    public static final String PROPERTY_GreenVideoGain = "GreenVideoGain";
    public static final String PROPERTY_A_ARG_TYPE_InstanceID = "A_ARG_TYPE_InstanceID";
    public static final String PROPERTY_HorizontalKeystone = "HorizontalKeystone";
    public static final String PROPERTY_VolumeDB = "VolumeDB";
    public static final String PROPERTY_Contrast = "Contrast";
    public static final String PROPERTY_TransformSettings = "TransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_PresetName = "A_ARG_TYPE_PresetName";
    public static final String PROPERTY_A_ARG_TYPE_Channel = "A_ARG_TYPE_Channel";
    public static final String PROPERTY_BlueVideoBlackLevel = "BlueVideoBlackLevel";
    public static final String PROPERTY_Sharpness = "Sharpness";
    public static final String PROPERTY_Brightness = "Brightness";
    public static final String PROPERTY_Volume = "Volume";
    public static final String PROPERTY_RedVideoGain = "RedVideoGain";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableValuePairs = "A_ARG_TYPE_StateVariableValuePairs";
    public static final String PROPERTY_AllowedTransformSettings = "AllowedTransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_ServiceType = "A_ARG_TYPE_ServiceType";
    public static final String PROPERTY_GreenVideoBlackLevel = "GreenVideoBlackLevel";
    public static final String PROPERTY_ColorTemperature = "ColorTemperature";
    public static final String PROPERTY_DefaultTransformSettings = "DefaultTransformSettings";
    public static final String PROPERTY_A_ARG_TYPE_StateVariableList = "A_ARG_TYPE_StateVariableList";
    public static final String PROPERTY_BlueVideoGain = "BlueVideoGain";
    public static final String PROPERTY_Mute = "Mute";
    public static final String PROPERTY_Loudness = "Loudness";
    public static final String PROPERTY_RedVideoBlackLevel = "RedVideoBlackLevel";
    public static final String PROPERTY_LastChange = "LastChange";

    //-------------------------------------------------------
    // Property value defined (2)
    //-------------------------------------------------------

    public enum A_ARG_TYPE_PresetName {
        UNDEFINED,
        V_FactoryDefaults;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_FactoryDefaults = "FactoryDefaults";

        public static A_ARG_TYPE_PresetName retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_FactoryDefaults)) {
                return V_FactoryDefaults;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_FactoryDefaults:
                    value = CONST_V_FactoryDefaults;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    public enum A_ARG_TYPE_Channel {
        UNDEFINED,
        V_Master;

        private static final String CONST_UNDEFINED = "UNDEFINED";
        private static final String CONST_V_Master = "Master";

        public static A_ARG_TYPE_Channel retrieveType(String value) {
            if (value.equals(CONST_UNDEFINED)) {
                return UNDEFINED;
            }

            if (value.equals(CONST_V_Master)) {
                return V_Master;
            }

            return UNDEFINED;
        }

        public String getValue() {
            String value = null;
            switch (this) {
                case V_Master:
                    value = CONST_V_Master;
                    break;

                default:
                    break;
            }

            return value;
        }
    }

    //-------------------------------------------------------
    // Action Result (44)
    //-------------------------------------------------------

    public class GetAllowedDefaultTransforms_Result {
        public String theAllowedDefaultTransformSettings;
    }

    public class GetAllAvailableTransforms_Result {
        public String theAllAllowedTransformSettings;
    }

    public class GetColorTemperature_Result {
        public Integer theCurrentColorTemperature;
    }

    // SetLoudness has no Result

    public class GetVolumeDB_Result {
        public Integer theCurrentVolume;
    }

    public class GetContrast_Result {
        public Integer theCurrentContrast;
    }

    public class GetGreenVideoGain_Result {
        public Integer theCurrentGreenVideoGain;
    }

    public class GetMute_Result {
        public Boolean theCurrentMute;
    }

    // SetColorTemperature has no Result

    // SetContrast has no Result

    // SetBlueVideoBlackLevel has no Result

    // SetSharpness has no Result

    public class ListPresets_Result {
        public String theCurrentPresetNameList;
    }

    // SetHorizontalKeystone has no Result

    // SetMute has no Result

    // SetBrightness has no Result

    public class GetDefaultTransforms_Result {
        public String theCurrentDefaultTransformSettings;
    }

    public class GetVerticalKeystone_Result {
        public Integer theCurrentVerticalKeystone;
    }

    public class GetVolumeDBRange_Result {
        public Integer theMinValue;
        public Integer theMaxValue;
    }

    public class GetBlueVideoBlackLevel_Result {
        public Integer theCurrentBlueVideoBlackLevel;
    }

    public class GetAllowedTransforms_Result {
        public String theCurrentAllowedTransformSettings;
    }

    public class GetBlueVideoGain_Result {
        public Integer theCurrentBlueVideoGain;
    }

    // SetVerticalKeystone has no Result

    // SetGreenVideoBlackLevel has no Result

    // SetVolumeDB has no Result

    public class GetSharpness_Result {
        public Integer theCurrentSharpness;
    }

    public class GetRedVideoBlackLevel_Result {
        public Integer theCurrentRedVideoBlackLevel;
    }

    // SetRedVideoGain has no Result

    // SetDefaultTransforms has no Result

    public class GetStateVariables_Result {
        public String theStateVariableValuePairs;
    }

    public class GetLoudness_Result {
        public Boolean theCurrentLoudness;
    }

    // SetRedVideoBlackLevel has no Result

    // SetVolume has no Result

    // SetBlueVideoGain has no Result

    // SetTransforms has no Result

    public class GetVolume_Result {
        public Integer theCurrentVolume;
    }

    public class SetStateVariables_Result {
        public String theStateVariableList;
    }

    public class GetRedVideoGain_Result {
        public Integer theCurrentRedVideoGain;
    }

    public class GetBrightness_Result {
        public Integer theCurrentBrightness;
    }

    public class GetGreenVideoBlackLevel_Result {
        public Integer theCurrentGreenVideoBlackLevel;
    }

    // SetGreenVideoGain has no Result

    public class GetHorizontalKeystone_Result {
        public Integer theCurrentHorizontalKeystone;
    }

    public class GetTransforms_Result {
        public String theCurrentTransformValues;
    }

    // SelectPreset has no Result


    //-------------------------------------------------------
    // Action Handler (44)
    //-------------------------------------------------------

    public interface Handler {
        int onGetAllowedDefaultTransforms(GetAllowedDefaultTransforms_Result result);
        int onGetAllAvailableTransforms(GetAllAvailableTransforms_Result result);
        int onGetColorTemperature(Long theInstanceID, GetColorTemperature_Result result);
        int onSetLoudness(Long theInstanceID, A_ARG_TYPE_Channel theChannel, Boolean theDesiredLoudness);
        int onGetVolumeDB(Long theInstanceID, A_ARG_TYPE_Channel theChannel, GetVolumeDB_Result result);
        int onGetContrast(Long theInstanceID, GetContrast_Result result);
        int onGetGreenVideoGain(Long theInstanceID, GetGreenVideoGain_Result result);
        int onGetMute(Long theInstanceID, A_ARG_TYPE_Channel theChannel, GetMute_Result result);
        int onSetColorTemperature(Long theInstanceID, Integer theDesiredColorTemperature);
        int onSetContrast(Long theInstanceID, Integer theDesiredContrast);
        int onSetBlueVideoBlackLevel(Long theInstanceID, Integer theDesiredBlueVideoBlackLevel);
        int onSetSharpness(Long theInstanceID, Integer theDesiredSharpness);
        int onListPresets(Long theInstanceID, ListPresets_Result result);
        int onSetHorizontalKeystone(Long theInstanceID, Integer theDesiredHorizontalKeystone);
        int onSetMute(Long theInstanceID, A_ARG_TYPE_Channel theChannel, Boolean theDesiredMute);
        int onSetBrightness(Long theInstanceID, Integer theDesiredBrightness);
        int onGetDefaultTransforms(GetDefaultTransforms_Result result);
        int onGetVerticalKeystone(Long theInstanceID, GetVerticalKeystone_Result result);
        int onGetVolumeDBRange(Long theInstanceID, A_ARG_TYPE_Channel theChannel, GetVolumeDBRange_Result result);
        int onGetBlueVideoBlackLevel(Long theInstanceID, GetBlueVideoBlackLevel_Result result);
        int onGetAllowedTransforms(Long theInstanceID, GetAllowedTransforms_Result result);
        int onGetBlueVideoGain(Long theInstanceID, GetBlueVideoGain_Result result);
        int onSetVerticalKeystone(Long theInstanceID, Integer theDesiredVerticalKeystone);
        int onSetGreenVideoBlackLevel(Long theInstanceID, Integer theDesiredGreenVideoBlackLevel);
        int onSetVolumeDB(Long theInstanceID, A_ARG_TYPE_Channel theChannel, Integer theDesiredVolume);
        int onGetSharpness(Long theInstanceID, GetSharpness_Result result);
        int onGetRedVideoBlackLevel(Long theInstanceID, GetRedVideoBlackLevel_Result result);
        int onSetRedVideoGain(Long theInstanceID, Integer theDesiredRedVideoGain);
        int onSetDefaultTransforms(String theDesiredDefaultTransformSettings);
        int onGetStateVariables(Long theInstanceID, String theStateVariableList, GetStateVariables_Result result);
        int onGetLoudness(Long theInstanceID, A_ARG_TYPE_Channel theChannel, GetLoudness_Result result);
        int onSetRedVideoBlackLevel(Long theInstanceID, Integer theDesiredRedVideoBlackLevel);
        int onSetVolume(Long theInstanceID, A_ARG_TYPE_Channel theChannel, Integer theDesiredVolume);
        int onSetBlueVideoGain(Long theInstanceID, Integer theDesiredBlueVideoGain);
        int onSetTransforms(Long theInstanceID, String theDesiredTransformValues);
        int onGetVolume(Long theInstanceID, A_ARG_TYPE_Channel theChannel, GetVolume_Result result);
        int onSetStateVariables(Long theInstanceID, String theRenderingControlUDN, String theServiceType, String theServiceId, String theStateVariableValuePairs, SetStateVariables_Result result);
        int onGetRedVideoGain(Long theInstanceID, GetRedVideoGain_Result result);
        int onGetBrightness(Long theInstanceID, GetBrightness_Result result);
        int onGetGreenVideoBlackLevel(Long theInstanceID, GetGreenVideoBlackLevel_Result result);
        int onSetGreenVideoGain(Long theInstanceID, Integer theDesiredGreenVideoGain);
        int onGetHorizontalKeystone(Long theInstanceID, GetHorizontalKeystone_Result result);
        int onGetTransforms(Long theInstanceID, GetTransforms_Result result);
        int onSelectPreset(Long theInstanceID, A_ARG_TYPE_PresetName thePresetName);
    }

    private int handle_GetAllowedDefaultTransforms(ActionInfo info) {
        GetAllowedDefaultTransforms_Result result = new GetAllowedDefaultTransforms_Result();

        int error = _handler.onGetAllowedDefaultTransforms(result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetAllowedDefaultTransforms_ARG_AllowedDefaultTransformSettings, result.theAllowedDefaultTransformSettings, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetAllAvailableTransforms(ActionInfo info) {
        GetAllAvailableTransforms_Result result = new GetAllAvailableTransforms_Result();

        int error = _handler.onGetAllAvailableTransforms(result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetAllAvailableTransforms_ARG_AllAllowedTransformSettings, result.theAllAllowedTransformSettings, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetColorTemperature(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetColorTemperature_ARG_InstanceID);
        GetColorTemperature_Result result = new GetColorTemperature_Result();

        int error = _handler.onGetColorTemperature(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetColorTemperature_ARG_CurrentColorTemperature, result.theCurrentColorTemperature, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetLoudness(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetLoudness_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_SetLoudness_ARG_Channel));
        Boolean theDesiredLoudness = (Boolean)info.getArgumentValue(_SetLoudness_ARG_DesiredLoudness);

        int error = _handler.onSetLoudness(theInstanceID, theChannel, theDesiredLoudness);

        return error;
    }

    private int handle_GetVolumeDB(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetVolumeDB_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_GetVolumeDB_ARG_Channel));
        GetVolumeDB_Result result = new GetVolumeDB_Result();

        int error = _handler.onGetVolumeDB(theInstanceID, theChannel, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetVolumeDB_ARG_CurrentVolume, result.theCurrentVolume, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetContrast(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetContrast_ARG_InstanceID);
        GetContrast_Result result = new GetContrast_Result();

        int error = _handler.onGetContrast(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetContrast_ARG_CurrentContrast, result.theCurrentContrast, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetGreenVideoGain(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetGreenVideoGain_ARG_InstanceID);
        GetGreenVideoGain_Result result = new GetGreenVideoGain_Result();

        int error = _handler.onGetGreenVideoGain(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetGreenVideoGain_ARG_CurrentGreenVideoGain, result.theCurrentGreenVideoGain, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetMute(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetMute_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_GetMute_ARG_Channel));
        GetMute_Result result = new GetMute_Result();

        int error = _handler.onGetMute(theInstanceID, theChannel, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetMute_ARG_CurrentMute, result.theCurrentMute, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetColorTemperature(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetColorTemperature_ARG_InstanceID);
        Integer theDesiredColorTemperature = (Integer)info.getArgumentValue(_SetColorTemperature_ARG_DesiredColorTemperature);

        int error = _handler.onSetColorTemperature(theInstanceID, theDesiredColorTemperature);

        return error;
    }

    private int handle_SetContrast(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetContrast_ARG_InstanceID);
        Integer theDesiredContrast = (Integer)info.getArgumentValue(_SetContrast_ARG_DesiredContrast);

        int error = _handler.onSetContrast(theInstanceID, theDesiredContrast);

        return error;
    }

    private int handle_SetBlueVideoBlackLevel(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetBlueVideoBlackLevel_ARG_InstanceID);
        Integer theDesiredBlueVideoBlackLevel = (Integer)info.getArgumentValue(_SetBlueVideoBlackLevel_ARG_DesiredBlueVideoBlackLevel);

        int error = _handler.onSetBlueVideoBlackLevel(theInstanceID, theDesiredBlueVideoBlackLevel);

        return error;
    }

    private int handle_SetSharpness(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetSharpness_ARG_InstanceID);
        Integer theDesiredSharpness = (Integer)info.getArgumentValue(_SetSharpness_ARG_DesiredSharpness);

        int error = _handler.onSetSharpness(theInstanceID, theDesiredSharpness);

        return error;
    }

    private int handle_ListPresets(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_ListPresets_ARG_InstanceID);
        ListPresets_Result result = new ListPresets_Result();

        int error = _handler.onListPresets(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_ListPresets_ARG_CurrentPresetNameList, result.theCurrentPresetNameList, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetHorizontalKeystone(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetHorizontalKeystone_ARG_InstanceID);
        Integer theDesiredHorizontalKeystone = (Integer)info.getArgumentValue(_SetHorizontalKeystone_ARG_DesiredHorizontalKeystone);

        int error = _handler.onSetHorizontalKeystone(theInstanceID, theDesiredHorizontalKeystone);

        return error;
    }

    private int handle_SetMute(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetMute_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_SetMute_ARG_Channel));
        Boolean theDesiredMute = (Boolean)info.getArgumentValue(_SetMute_ARG_DesiredMute);

        int error = _handler.onSetMute(theInstanceID, theChannel, theDesiredMute);

        return error;
    }

    private int handle_SetBrightness(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetBrightness_ARG_InstanceID);
        Integer theDesiredBrightness = (Integer)info.getArgumentValue(_SetBrightness_ARG_DesiredBrightness);

        int error = _handler.onSetBrightness(theInstanceID, theDesiredBrightness);

        return error;
    }

    private int handle_GetDefaultTransforms(ActionInfo info) {
        GetDefaultTransforms_Result result = new GetDefaultTransforms_Result();

        int error = _handler.onGetDefaultTransforms(result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetDefaultTransforms_ARG_CurrentDefaultTransformSettings, result.theCurrentDefaultTransformSettings, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetVerticalKeystone(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetVerticalKeystone_ARG_InstanceID);
        GetVerticalKeystone_Result result = new GetVerticalKeystone_Result();

        int error = _handler.onGetVerticalKeystone(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetVerticalKeystone_ARG_CurrentVerticalKeystone, result.theCurrentVerticalKeystone, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetVolumeDBRange(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetVolumeDBRange_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_GetVolumeDBRange_ARG_Channel));
        GetVolumeDBRange_Result result = new GetVolumeDBRange_Result();

        int error = _handler.onGetVolumeDBRange(theInstanceID, theChannel, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetVolumeDBRange_ARG_MinValue, result.theMinValue, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

            if (! info.setArgumentValue(_GetVolumeDBRange_ARG_MaxValue, result.theMaxValue, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetBlueVideoBlackLevel(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetBlueVideoBlackLevel_ARG_InstanceID);
        GetBlueVideoBlackLevel_Result result = new GetBlueVideoBlackLevel_Result();

        int error = _handler.onGetBlueVideoBlackLevel(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetBlueVideoBlackLevel_ARG_CurrentBlueVideoBlackLevel, result.theCurrentBlueVideoBlackLevel, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetAllowedTransforms(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetAllowedTransforms_ARG_InstanceID);
        GetAllowedTransforms_Result result = new GetAllowedTransforms_Result();

        int error = _handler.onGetAllowedTransforms(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetAllowedTransforms_ARG_CurrentAllowedTransformSettings, result.theCurrentAllowedTransformSettings, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetBlueVideoGain(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetBlueVideoGain_ARG_InstanceID);
        GetBlueVideoGain_Result result = new GetBlueVideoGain_Result();

        int error = _handler.onGetBlueVideoGain(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetBlueVideoGain_ARG_CurrentBlueVideoGain, result.theCurrentBlueVideoGain, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetVerticalKeystone(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetVerticalKeystone_ARG_InstanceID);
        Integer theDesiredVerticalKeystone = (Integer)info.getArgumentValue(_SetVerticalKeystone_ARG_DesiredVerticalKeystone);

        int error = _handler.onSetVerticalKeystone(theInstanceID, theDesiredVerticalKeystone);

        return error;
    }

    private int handle_SetGreenVideoBlackLevel(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetGreenVideoBlackLevel_ARG_InstanceID);
        Integer theDesiredGreenVideoBlackLevel = (Integer)info.getArgumentValue(_SetGreenVideoBlackLevel_ARG_DesiredGreenVideoBlackLevel);

        int error = _handler.onSetGreenVideoBlackLevel(theInstanceID, theDesiredGreenVideoBlackLevel);

        return error;
    }

    private int handle_SetVolumeDB(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetVolumeDB_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_SetVolumeDB_ARG_Channel));
        Integer theDesiredVolume = (Integer)info.getArgumentValue(_SetVolumeDB_ARG_DesiredVolume);

        int error = _handler.onSetVolumeDB(theInstanceID, theChannel, theDesiredVolume);

        return error;
    }

    private int handle_GetSharpness(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetSharpness_ARG_InstanceID);
        GetSharpness_Result result = new GetSharpness_Result();

        int error = _handler.onGetSharpness(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetSharpness_ARG_CurrentSharpness, result.theCurrentSharpness, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetRedVideoBlackLevel(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetRedVideoBlackLevel_ARG_InstanceID);
        GetRedVideoBlackLevel_Result result = new GetRedVideoBlackLevel_Result();

        int error = _handler.onGetRedVideoBlackLevel(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetRedVideoBlackLevel_ARG_CurrentRedVideoBlackLevel, result.theCurrentRedVideoBlackLevel, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetRedVideoGain(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetRedVideoGain_ARG_InstanceID);
        Integer theDesiredRedVideoGain = (Integer)info.getArgumentValue(_SetRedVideoGain_ARG_DesiredRedVideoGain);

        int error = _handler.onSetRedVideoGain(theInstanceID, theDesiredRedVideoGain);

        return error;
    }

    private int handle_SetDefaultTransforms(ActionInfo info) {
        String theDesiredDefaultTransformSettings = (String)info.getArgumentValue(_SetDefaultTransforms_ARG_DesiredDefaultTransformSettings);

        int error = _handler.onSetDefaultTransforms(theDesiredDefaultTransformSettings);

        return error;
    }

    private int handle_GetStateVariables(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetStateVariables_ARG_InstanceID);
        String theStateVariableList = (String)info.getArgumentValue(_GetStateVariables_ARG_StateVariableList);
        GetStateVariables_Result result = new GetStateVariables_Result();

        int error = _handler.onGetStateVariables(theInstanceID, theStateVariableList, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetStateVariables_ARG_StateVariableValuePairs, result.theStateVariableValuePairs, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetLoudness(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetLoudness_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_GetLoudness_ARG_Channel));
        GetLoudness_Result result = new GetLoudness_Result();

        int error = _handler.onGetLoudness(theInstanceID, theChannel, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetLoudness_ARG_CurrentLoudness, result.theCurrentLoudness, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetRedVideoBlackLevel(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetRedVideoBlackLevel_ARG_InstanceID);
        Integer theDesiredRedVideoBlackLevel = (Integer)info.getArgumentValue(_SetRedVideoBlackLevel_ARG_DesiredRedVideoBlackLevel);

        int error = _handler.onSetRedVideoBlackLevel(theInstanceID, theDesiredRedVideoBlackLevel);

        return error;
    }

    private int handle_SetVolume(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetVolume_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_SetVolume_ARG_Channel));
        Integer theDesiredVolume = (Integer)info.getArgumentValue(_SetVolume_ARG_DesiredVolume);

        int error = _handler.onSetVolume(theInstanceID, theChannel, theDesiredVolume);

        return error;
    }

    private int handle_SetBlueVideoGain(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetBlueVideoGain_ARG_InstanceID);
        Integer theDesiredBlueVideoGain = (Integer)info.getArgumentValue(_SetBlueVideoGain_ARG_DesiredBlueVideoGain);

        int error = _handler.onSetBlueVideoGain(theInstanceID, theDesiredBlueVideoGain);

        return error;
    }

    private int handle_SetTransforms(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetTransforms_ARG_InstanceID);
        String theDesiredTransformValues = (String)info.getArgumentValue(_SetTransforms_ARG_DesiredTransformValues);

        int error = _handler.onSetTransforms(theInstanceID, theDesiredTransformValues);

        return error;
    }

    private int handle_GetVolume(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetVolume_ARG_InstanceID);
        A_ARG_TYPE_Channel theChannel = A_ARG_TYPE_Channel.retrieveType((String)info.getArgumentValue(_GetVolume_ARG_Channel));
        GetVolume_Result result = new GetVolume_Result();

        int error = _handler.onGetVolume(theInstanceID, theChannel, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetVolume_ARG_CurrentVolume, result.theCurrentVolume, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetStateVariables(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetStateVariables_ARG_InstanceID);
        String theRenderingControlUDN = (String)info.getArgumentValue(_SetStateVariables_ARG_RenderingControlUDN);
        String theServiceType = (String)info.getArgumentValue(_SetStateVariables_ARG_ServiceType);
        String theServiceId = (String)info.getArgumentValue(_SetStateVariables_ARG_ServiceId);
        String theStateVariableValuePairs = (String)info.getArgumentValue(_SetStateVariables_ARG_StateVariableValuePairs);
        SetStateVariables_Result result = new SetStateVariables_Result();

        int error = _handler.onSetStateVariables(theInstanceID, theRenderingControlUDN, theServiceType, theServiceId, theStateVariableValuePairs, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_SetStateVariables_ARG_StateVariableList, result.theStateVariableList, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetRedVideoGain(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetRedVideoGain_ARG_InstanceID);
        GetRedVideoGain_Result result = new GetRedVideoGain_Result();

        int error = _handler.onGetRedVideoGain(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetRedVideoGain_ARG_CurrentRedVideoGain, result.theCurrentRedVideoGain, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetBrightness(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetBrightness_ARG_InstanceID);
        GetBrightness_Result result = new GetBrightness_Result();

        int error = _handler.onGetBrightness(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetBrightness_ARG_CurrentBrightness, result.theCurrentBrightness, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetGreenVideoBlackLevel(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetGreenVideoBlackLevel_ARG_InstanceID);
        GetGreenVideoBlackLevel_Result result = new GetGreenVideoBlackLevel_Result();

        int error = _handler.onGetGreenVideoBlackLevel(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetGreenVideoBlackLevel_ARG_CurrentGreenVideoBlackLevel, result.theCurrentGreenVideoBlackLevel, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SetGreenVideoGain(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SetGreenVideoGain_ARG_InstanceID);
        Integer theDesiredGreenVideoGain = (Integer)info.getArgumentValue(_SetGreenVideoGain_ARG_DesiredGreenVideoGain);

        int error = _handler.onSetGreenVideoGain(theInstanceID, theDesiredGreenVideoGain);

        return error;
    }

    private int handle_GetHorizontalKeystone(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetHorizontalKeystone_ARG_InstanceID);
        GetHorizontalKeystone_Result result = new GetHorizontalKeystone_Result();

        int error = _handler.onGetHorizontalKeystone(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetHorizontalKeystone_ARG_CurrentHorizontalKeystone, result.theCurrentHorizontalKeystone, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_GetTransforms(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_GetTransforms_ARG_InstanceID);
        GetTransforms_Result result = new GetTransforms_Result();

        int error = _handler.onGetTransforms(theInstanceID, result);
        if (error == UpnpError.OK) {
            if (! info.setArgumentValue(_GetTransforms_ARG_CurrentTransformValues, result.theCurrentTransformValues, Argument.Direction.OUT)) {
                Log.d(TAG, "setArgumentValue: false");
                return UpnpError.E_ARGUMENT_VALUE_INVALID;
            }

        }

        return error;
    }

    private int handle_SelectPreset(ActionInfo info) {
        Long theInstanceID = (Long)info.getArgumentValue(_SelectPreset_ARG_InstanceID);
        A_ARG_TYPE_PresetName thePresetName = A_ARG_TYPE_PresetName.retrieveType((String)info.getArgumentValue(_SelectPreset_ARG_PresetName));

        int error = _handler.onSelectPreset(theInstanceID, thePresetName);

        return error;
    }

    //-------------------------------------------------------
    // Method
    //-------------------------------------------------------

    private Service _service;
    private Handler _handler;

    public MediaRenderingControl(Service service) {
        _service = service;
    }

    public void setHandler(Handler handler) {
        _handler = handler;
    }

    @Override
    public int onAction(ActionInfo info) {
        if (_handler == null) {
           Log.e(TAG, "handler is null");
           return UpnpError.E_ACTION_NOT_IMPLEMENTED;
        }

        if (info.getAction().getName().equals(ACTION_GetAllowedDefaultTransforms)) {
            return handle_GetAllowedDefaultTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_GetAllAvailableTransforms)) {
            return handle_GetAllAvailableTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_GetColorTemperature)) {
            return handle_GetColorTemperature(info);
        }

        if (info.getAction().getName().equals(ACTION_SetLoudness)) {
            return handle_SetLoudness(info);
        }

        if (info.getAction().getName().equals(ACTION_GetVolumeDB)) {
            return handle_GetVolumeDB(info);
        }

        if (info.getAction().getName().equals(ACTION_GetContrast)) {
            return handle_GetContrast(info);
        }

        if (info.getAction().getName().equals(ACTION_GetGreenVideoGain)) {
            return handle_GetGreenVideoGain(info);
        }

        if (info.getAction().getName().equals(ACTION_GetMute)) {
            return handle_GetMute(info);
        }

        if (info.getAction().getName().equals(ACTION_SetColorTemperature)) {
            return handle_SetColorTemperature(info);
        }

        if (info.getAction().getName().equals(ACTION_SetContrast)) {
            return handle_SetContrast(info);
        }

        if (info.getAction().getName().equals(ACTION_SetBlueVideoBlackLevel)) {
            return handle_SetBlueVideoBlackLevel(info);
        }

        if (info.getAction().getName().equals(ACTION_SetSharpness)) {
            return handle_SetSharpness(info);
        }

        if (info.getAction().getName().equals(ACTION_ListPresets)) {
            return handle_ListPresets(info);
        }

        if (info.getAction().getName().equals(ACTION_SetHorizontalKeystone)) {
            return handle_SetHorizontalKeystone(info);
        }

        if (info.getAction().getName().equals(ACTION_SetMute)) {
            return handle_SetMute(info);
        }

        if (info.getAction().getName().equals(ACTION_SetBrightness)) {
            return handle_SetBrightness(info);
        }

        if (info.getAction().getName().equals(ACTION_GetDefaultTransforms)) {
            return handle_GetDefaultTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_GetVerticalKeystone)) {
            return handle_GetVerticalKeystone(info);
        }

        if (info.getAction().getName().equals(ACTION_GetVolumeDBRange)) {
            return handle_GetVolumeDBRange(info);
        }

        if (info.getAction().getName().equals(ACTION_GetBlueVideoBlackLevel)) {
            return handle_GetBlueVideoBlackLevel(info);
        }

        if (info.getAction().getName().equals(ACTION_GetAllowedTransforms)) {
            return handle_GetAllowedTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_GetBlueVideoGain)) {
            return handle_GetBlueVideoGain(info);
        }

        if (info.getAction().getName().equals(ACTION_SetVerticalKeystone)) {
            return handle_SetVerticalKeystone(info);
        }

        if (info.getAction().getName().equals(ACTION_SetGreenVideoBlackLevel)) {
            return handle_SetGreenVideoBlackLevel(info);
        }

        if (info.getAction().getName().equals(ACTION_SetVolumeDB)) {
            return handle_SetVolumeDB(info);
        }

        if (info.getAction().getName().equals(ACTION_GetSharpness)) {
            return handle_GetSharpness(info);
        }

        if (info.getAction().getName().equals(ACTION_GetRedVideoBlackLevel)) {
            return handle_GetRedVideoBlackLevel(info);
        }

        if (info.getAction().getName().equals(ACTION_SetRedVideoGain)) {
            return handle_SetRedVideoGain(info);
        }

        if (info.getAction().getName().equals(ACTION_SetDefaultTransforms)) {
            return handle_SetDefaultTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_GetStateVariables)) {
            return handle_GetStateVariables(info);
        }

        if (info.getAction().getName().equals(ACTION_GetLoudness)) {
            return handle_GetLoudness(info);
        }

        if (info.getAction().getName().equals(ACTION_SetRedVideoBlackLevel)) {
            return handle_SetRedVideoBlackLevel(info);
        }

        if (info.getAction().getName().equals(ACTION_SetVolume)) {
            return handle_SetVolume(info);
        }

        if (info.getAction().getName().equals(ACTION_SetBlueVideoGain)) {
            return handle_SetBlueVideoGain(info);
        }

        if (info.getAction().getName().equals(ACTION_SetTransforms)) {
            return handle_SetTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_GetVolume)) {
            return handle_GetVolume(info);
        }

        if (info.getAction().getName().equals(ACTION_SetStateVariables)) {
            return handle_SetStateVariables(info);
        }

        if (info.getAction().getName().equals(ACTION_GetRedVideoGain)) {
            return handle_GetRedVideoGain(info);
        }

        if (info.getAction().getName().equals(ACTION_GetBrightness)) {
            return handle_GetBrightness(info);
        }

        if (info.getAction().getName().equals(ACTION_GetGreenVideoBlackLevel)) {
            return handle_GetGreenVideoBlackLevel(info);
        }

        if (info.getAction().getName().equals(ACTION_SetGreenVideoGain)) {
            return handle_SetGreenVideoGain(info);
        }

        if (info.getAction().getName().equals(ACTION_GetHorizontalKeystone)) {
            return handle_GetHorizontalKeystone(info);
        }

        if (info.getAction().getName().equals(ACTION_GetTransforms)) {
            return handle_GetTransforms(info);
        }

        if (info.getAction().getName().equals(ACTION_SelectPreset)) {
            return handle_SelectPreset(info);
        }

        return UpnpError.E_ACTION_NOT_IMPLEMENTED;
    }

    public void sendEvents() {
        EventInfo info = EventInfoCreator.create(_service);

        try {
            UpnpManager.getUpnp().sendEvents(info);
        } catch (UpnpException e) {
            e.printStackTrace();
        }
    }

    public void setAllowedDefaultTransformSettings(String theAllowedDefaultTransformSettings) {
         _service.setPropertyValue(PROPERTY_AllowedDefaultTransformSettings, theAllowedDefaultTransformSettings);
    }

    public void setDefaultTransformSettings(String theDefaultTransformSettings) {
         _service.setPropertyValue(PROPERTY_DefaultTransformSettings, theDefaultTransformSettings);
    }

    public void setLastChange(String theLastChange) {
         _service.setPropertyValue(PROPERTY_LastChange, theLastChange);
    }

}
